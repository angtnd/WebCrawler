/*adskeeper.comV3.0*/ if(!this.AdskeeperJSON){ AdskeeperJSON=function(){function f(n){return n<10?'0'+n:n;} Date.prototype.toJSON=function(){return this.getUTCFullYear()+'-'+ f(this.getUTCMonth()+1)+'-'+ f(this.getUTCDate())+'T'+ f(this.getUTCHours())+':'+ f(this.getUTCMinutes())+':'+ f(this.getUTCSeconds())+'Z';};var m={'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','\\':'\\\\'};function stringify(value,whitelist){var a,i,k,l,r=/["\\\x00-\x1f\x7f-\x9f]/g,v;switch(typeof value){case'string':return r.test(value)?'"'+value.replace(r,function(a){var c=m[a];if(c){return c;} c=a.charCodeAt();return'\\u00'+Math.floor(c/16).toString(16)+ (c%16).toString(16);})+'"':'"'+value+'"';case'number':return isFinite(value)?String(value):'null';case'boolean':case'null':return String(value);case'object':if(!value){return'null';} if(typeof value.toJSON==='function'){return stringify(value.toJSON());} a=[];if(typeof value.length==='number'&&!(value.propertyIsEnumerable('length'))){l=value.length;for(i=0;i<l;i+=1){a.push(stringify(value[i],whitelist)||'null');} return'['+a.join(',')+']';} if(whitelist){l=whitelist.length;for(i=0;i<l;i+=1){k=whitelist[i];if(typeof k==='string'){v=stringify(value[k],whitelist);if(v){a.push(stringify(k)+':'+v);}}}}else{for(k in value){if(typeof k==='string'){v=stringify(value[k],whitelist);if(v){a.push(stringify(k)+':'+v);}}}} return'{'+a.join(',')+'}';}} return{stringify:stringify,parse:function(text,filter){var j;function walk(k,v){var i,n;if(v&&typeof v==='object'){for(i in v){if(Object.prototype.hasOwnProperty.apply(v,[i])){n=walk(i,v[i]);if(n!==undefined){v[i]=n;}}}} return filter(k,v);} if(/^[\],:{}\s]*$/.test(text.replace(/\\./g,'@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,']').replace(/(?:^|:|,)(?:\s*\[)+/g,''))){j=eval('('+text+')');return typeof filter==='function'?walk('',j):j;} throw new SyntaxError('parseJSON');}};}();} AdskeeperBaseBlockC20361 = function(root_id, GB, fallback, containerId) { var self = this; this.GB = GB; this.root = this.GB.document.getElementById(root_id); this.containerId = containerId; this.UV = fallback; this.page = 1; this.iteration = 1; this.adlink = ''; this.template = ''; this.id = 20361; this.tickerShow = 0; this.LP = []; this.YR = {}; this.ZV = {}; this.BS = []; this.OV = []; this.MQ = []; this.WP = ""; this.OD = ""; this.YI = 0; this.BB = {}; this.GS = ""; this.CG = ""; this.OW = []; this.crashStep = 0; this.loadedDefault = false; this.teaserHashes = {}; this.teaserData = {}; this.VO = 2; this.TX = 0; this.fakeMode = 0; this.requestParams = {}; this.infIds = []; this.PV = []; this.realIds = []; this.protocols = []; this.HP = []; this.PV['news7476'] = 'ab'; this.HP['news'] = 'ab'; this.OW['news'] = "adskeeper.co.uk"; this.FM = '7476'; this.DW = 'news'; this.infIds['news'] = '7476'; this.realIds['news'] = '7476'; this.protocols['news'] = '5'; this.PV['goods5003'] = 'af'; this.HP['goods'] = 'af'; this.OW['goods'] = "adskeeper.co.uk"; this.FM = '5003'; this.DW = 'goods'; this.infIds['goods'] = '5003'; this.realIds['goods'] = '5003'; this.protocols['goods'] = '5'; self.templateTextNews = ' <div class="mgbox"> {foreach} {if this.iteration != 1}</div>{/if}<div class="mgline"> <div class="image-with-text"> <div class="mcimg"> <a {$target} {$href} ><div class="image-container"><img class="mcimg" {$src}></div></a> </div> <div class="text-elements"> <div class="text_on_hover"> <div class="mctitle"><a {$target} {$href}>{$title}</a></div> <div class="mcdomain"><a {$target} {$href} >{$source}</a></div> </div> </div> </div> {/foreach} </div> </div> '; self.templateTextGoods = ' <div class="mgbox"> {foreach} {if this.iteration != 1}</div>{/if}<div class="mgline"> <div class="image-with-text"> <div class="mcimg"> <a {$target} {$href} ><div class="image-container"><img class="mcimg" {$src}></div></a> </div> <div class="text-elements"> <div class="text_on_hover"> <div class="mctitle"><a {$target} {$href}>{$title}</a></div> <a {$target} {$href}> <div class="mcprice"> <span class="mcprice">{$price}</span> {if $priceold} <span class="mcpriceold">{$priceold}</span> <span class="mcdiscount">{$discount}</span> {/if} </div> </a> <div class="mcdomain"><a {$target} {$href} >{$source}</a></div> </div> </div> </div> {/foreach} </div> </div> '; self.stylesNews = '@font-face { font-family: \'PFDinDisplayProRegular\'; src: url(\'//cdn.adskeeper.co.uk/fonts/pfdindisplaypro-regular-webfont.eot\'); src: url(\'//cdn.adskeeper.co.uk/fonts/pfdindisplaypro-regular-webfont.eot?#iefix\') format(\'embedded-opentype\'), url(\'//cdn.adskeeper.co.uk/fonts/pfdindisplaypro-regular-webfont.woff\') format(\'woff\'), url(\'//cdn.adskeeper.co.uk/fonts/pfdindisplaypro-regular-webfont.ttf\') format(\'truetype\'), url(\'//cdn.adskeeper.co.uk/fonts/pfdindisplaypro-regular-webfont.svg#PFDinDisplayProRegular\') format(\'svg\'); } .mgresponsive { display: inherit; } .mgbox { padding: 0 !important; position: relative !important; text-align: center; vertical-align: top !important; margin: 0 auto; border-style: solid; border-width: 0px; border-color: ; background-color: ; display: -ms-flexbox; display: -webkit-flex; display: flex; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-flex-wrap: wrap; -ms-flex-wrap: wrap; flex-wrap: wrap; line-height: 100% !important; transition: none !important; } .mgbox { width: 100%; max-width: 100%; } div.mcimg { padding: 0px; text-align: center; } img.mcimg { border-style: solid; border-color: #ffffff; border-width: 0px; width: 100% !important; height: auto !important; max-width: 160px; max-height: 160px; box-sizing: border-box; } .mctitle { margin-top: 10px; text-align: center; } .mctitle a { font-weight: normal; font-size: 13px; line-height: 13px; font-style: normal; text-decoration: none; color: #000000; font-family: \'PFDinDisplayProRegular\',Tahoma,Geneva; } .mcdesc { display: none; text-align: center; } .mcdesc a { font-weight: normal; font-size: 11px; line-height: 11px; font-style: normal; text-decoration: none; color: #444444; font-family: \'PFDinDisplayProRegular\',Tahoma,Geneva; } .mcdomain { display: block; text-align: center; } .mcdomain a { font-weight: normal; font-size: 12px; line-height: 12px; font-style: italic; text-decoration: none; color: #159417; font-family: \'PFDinDisplayProRegular\',Tahoma,Geneva; padding: 4px; display: block; overflow: hidden; } .mgline { background: none repeat scroll 0 0; background-color: ; cursor: pointer; display: inline-block; _overflow: hidden; *zoom: 1; *display: inline; padding: 0 !important; border-style: solid; border-color: #ffffff; border-width: 0px; width: 99%; max-width: 99%; box-sizing: border-box; margin: 10px 0.5%; display: -ms-flexbox; display: -webkit-flex; display: flex; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; word-wrap: break-word; } .mgline { vertical-align: top; } .mgline, .mgbox { min-width: 90px; } .mgline[max-width~="120px"] .mcdesc { display: none !important; } @supports not (flex-wrap: wrap) { .mgbox { display: block !important; } .mgline { display: inline-block !important; } } .text-elements a { text-decoration: none; } div.mcprice { text-align: center; } div.mcprice span { font-weight: bold; font-size: 12px; line-height: 12px; font-style: normal; text-decoration: none; color: #ff0000; font-family: \'PFDinDisplayProRegular\',Tahoma,Geneva; } span.mcpriceold { text-decoration: line-through !important; } @media (max-width: 480px) { .mgline { width: 48% !important; margin: 1% !important; max-width: 48% !important; } } '; self.stylesGoods = '@font-face { font-family: \'PFDinDisplayProRegular\'; src: url(\'//cdn.adskeeper.co.uk/fonts/pfdindisplaypro-regular-webfont.eot\'); src: url(\'//cdn.adskeeper.co.uk/fonts/pfdindisplaypro-regular-webfont.eot?#iefix\') format(\'embedded-opentype\'), url(\'//cdn.adskeeper.co.uk/fonts/pfdindisplaypro-regular-webfont.woff\') format(\'woff\'), url(\'//cdn.adskeeper.co.uk/fonts/pfdindisplaypro-regular-webfont.ttf\') format(\'truetype\'), url(\'//cdn.adskeeper.co.uk/fonts/pfdindisplaypro-regular-webfont.svg#PFDinDisplayProRegular\') format(\'svg\'); } .mgresponsive { display: inherit; } .mgbox { padding: 0 !important; position: relative !important; text-align: center; vertical-align: top !important; margin: 0 auto; border-style: solid; border-width: 0px; border-color: ; background-color: ; display: -ms-flexbox; display: -webkit-flex; display: flex; -webkit-flex-direction: row; -ms-flex-direction: row; flex-direction: row; -webkit-flex-wrap: wrap; -ms-flex-wrap: wrap; flex-wrap: wrap; line-height: 100% !important; transition: none !important; } .mgbox { width: 100%; max-width: 100%; } div.mcimg { padding: 0px; text-align: center; } img.mcimg { border-style: solid; border-color: #ffffff; border-width: 0px; width: 100% !important; height: auto !important; max-width: 160px; max-height: 160px; box-sizing: border-box; } .mctitle { margin-top: 10px; text-align: center; } .mctitle a { font-weight: normal; font-size: 13px; line-height: 13px; font-style: normal; text-decoration: none; color: #000000; font-family: \'PFDinDisplayProRegular\',Tahoma,Geneva; } .mcdesc { display: none; text-align: center; } .mcdesc a { font-weight: normal; font-size: 11px; line-height: 11px; font-style: normal; text-decoration: none; color: #444444; font-family: \'PFDinDisplayProRegular\',Tahoma,Geneva; } .mcdomain { display: block; text-align: center; } .mcdomain a { font-weight: normal; font-size: 12px; line-height: 12px; font-style: italic; text-decoration: none; color: #159417; font-family: \'PFDinDisplayProRegular\',Tahoma,Geneva; padding: 4px; display: block; overflow: hidden; } .mgline { background: none repeat scroll 0 0; background-color: ; cursor: pointer; display: inline-block; _overflow: hidden; *zoom: 1; *display: inline; padding: 0 !important; border-style: solid; border-color: #ffffff; border-width: 0px; width: 99%; max-width: 99%; box-sizing: border-box; margin: 10px 0.5%; display: -ms-flexbox; display: -webkit-flex; display: flex; -webkit-flex-direction: column; -ms-flex-direction: column; flex-direction: column; word-wrap: break-word; } .mgline { vertical-align: top; } .mgline, .mgbox { min-width: 90px; } .mgline[max-width~="120px"] .mcdesc { display: none !important; } @supports not (flex-wrap: wrap) { .mgbox { display: block !important; } .mgline { display: inline-block !important; } } .text-elements a { text-decoration: none; } div.mcprice { text-align: center; } div.mcprice span { font-weight: bold; font-size: 12px; line-height: 12px; font-style: normal; text-decoration: none; color: #ff0000; font-family: \'PFDinDisplayProRegular\',Tahoma,Geneva; } span.mcpriceold { text-decoration: line-through !important; } @media (max-width: 480px) { .mgline { width: 48% !important; margin: 1% !important; max-width: 48% !important; } } '; self.webProtocol = "http:"; self.clickTracking = ""; self.LY = ''; self.funcBlocks = {}; this.TO = function(str,limit) { if (str.length<=limit) return str; var word=new Array(); word=str.split(" "); var ret=word[0] + ' '; var test; for (i=1;i<word.length;i++){ test=ret+word[i]; if (test.length>limit) return ret+'...'; else ret+=word[i] + ' '; } return str; }; this.HJ = function(str,limit){ var word=new Array(); var i; var ret=''; word=str.split(" "); for (i=0;i<word.length;i++){ if (word[i].length>limit && word[i].search(/&\w+;/)<0) ret+=word[i].substr(0,limit) + ' ' + word[i].substr(limit) + ' '; else ret+=word[i] + ' '; } return ret; }; this.VS = function(title) { if (this.LY=='news') { } else { } return title; }; this.XL = function(desc) { if (this.LY=='news') { } else { } return desc; }; this.isArray = function(o) { return Object.prototype.toString.call(o) === '[object Array]'; }; self.fixGetElementsByClassNameHandler = function(el) { if (el.getElementsByClassName == undefined) { el.getElementsByClassName = function(cl) { var retnode = []; var myclass = new RegExp('\\b'+cl+'\\b'); var elem = this.getElementsByTagName('*'); for (var i = 0; i < elem.length; i++) { var classes = elem[i].className; if (myclass.test(classes)) retnode.push(elem[i]); } return retnode; }; } }; this.VB = function() { if (!this.UV && this.GB.document.getElementById("AdskeeperPreloadC" + this.containerId)) { this.GB.document.getElementById("AdskeeperPreloadC" + this.containerId).style.display = 'none'; } else if (this.UV && this.YI == 0) { this.root.innerHTML = ""; } }; this.AdskeeperLoadNews = function(json){ this.VB(); if (self.fakeMode == 0) { for (var i = 0; i < self.BS.length; i++) { self[self.BS[i]](); } } if (this.isArray(json)){ if (json.length==0) { if (!this.forceShow) { this.blockType = this.blockType == 'news' ? 'goods' : 'news'; var type = this.blockType; var id = this.realIds[type]; this.blockId = id; this.subdomain = this.PV[type + id]; this.YR["mg_id"] = id; this.YR["mg_type"] = type; this.setCookie(); this.forceShow = true; this.QJ(this.forceShow); } return; } if (self.LY == "news") { var template = self["templateFuncNews"](self, json); } else { var template = self["templateFuncGoods"](self, json); } if (this.root && template){ if (this.UV && this.YI==0) this.root.innerHTML = ""; this.root.innerHTML+= (this.YI==0?this.OD:"") + this.GS + template + this.CG; } } else { if (this.root && this.YI==0) { this.root.innerHTML=''; return; } } this.YR["page"] = this.page; this.YR['time'] = (new Date()).getTime(); this.setCookie(); var hrefs = this.root.getElementsByTagName("a"); for (var i = 0; i < hrefs.length; i++) { } if (this.LY=='news') { this.TI(self.stylesNews); } else { this.TI(self.stylesGoods); } this.YI++; if (self.fakeMode == 0) { for (var i = 0; i < self.OV.length; i++) { self[self.OV[i]](); } } }; this.GO = function() { var d = this.GB.document, w = this.GB, dE = 'documentElement', cH = 'clientHeight', cW = 'clientWidth', iH = 'innerHeight', iW = 'innerWidth', sH = 'scrollHeight', sW = 'scrollWidth', oH = 'offsetHeight', oW = 'offsetWidth', oL = 'offsetLeft', oT = 'offsetTop', sT = 'scrollTop', sL = 'scrollLeft'; if (w[iW]) { return {"c": w[iH], "s": w.pageYOffset}; } else if (d[dE] && d[dE][cW]) { return {"c": d[dE][cH], "s": d[dE][sT]}; } else if (d.body[cW]) { return {"c": d.body[cH], "s": d.body[sT]}; } return 0; }; this.AdskeeperRedirectComposite = function() { if (arguments.length == 5) { var arr = arguments[4]; } else { var arr = arguments[0]; } if (self.crashWorkerTimeout) { clearTimeout(self.crashWorkerTimeout); } if (self.TX >= self.VO || self.crashStep == 2) { self.LY = self.blockType; self.AdskeeperLoadNews(arr); } else { var rType = self.blockType == 'news' ? 'goods' : 'news'; var rId = self.realIds[rType]; if (self.PV[rType + rId]) { if (self.crashStep == 1) self.crashStep++; self.blockId = rId; self.blockType = rType; self.subdomain = self.PV[rType + rId]; self.YR["mg_id"] = rId; self.YR["mg_type"] = rType; self.setCookie(); self.WP = '//'+self.subdomain+'-'+self.blockType.substr(0,1)+'b.'+self.OW[self.blockType]+'/'+self.blockId+'/'; self.QJ(self.TX >= (self.VO - 1)); self.TX++; } } }; this.crashWorker = function() { if (AdskeeperInfC20361.template == '' && !AdskeeperInfC20361.loadedDefault) { AdskeeperInfC20361.crashStep = 1; AdskeeperInfC20361.AdskeeperRedirectComposite([]); } }; this.renderItem = function(n, callbackText, type) { if (self.isArray(n)) { if (type == "News") { var p = {}; p.source = n[0]; p.id = n[1]; p.title = n[3]; p.desc = n[4]; p.mirror = n[5] ? n[5] : self.EAs[self.TW]; p.hash = n[6]; p.other = n[7]; } else { var p = {}; p.source = n[0]; p.id = n[1]; p.title = n[3]; p.desc = n[4]; p.mirror = self.EAs[self.TW]; p.key = n[6]; p.price = n[7].replace(".00", ""); p.priceold = n[8].replace(".00", ""); p.discount = p.priceold.replace(new RegExp('[^0-9.]'), '') == '' ? '' : Math.floor((1 * /\d+(?:\.\d+)?/.exec(p.priceold) - 1 * /\d+(?:\.\d+)?/.exec(p.price)) * 100 / /\d+(?:\.\d+)?/.exec(p.priceold)) + '%'; p.hash = n[9]; p.other = n[10]; } if (!(p.id in self.BB) && p.id != '') { if (typeof(p.hash) !== 'undefined' && typeof(p.id !== 'undefined')) { self.teaserHashes[p.id] = p.hash; } self.BB[p.id] = 1; var href = self.clickTracking + self.webProtocol; if (typeof(p.other['l']) != 'undefined') { href += p.other['l']; } else { if (type == "News") { href += '//' + p.mirror + '/' + (self.isOurRedirector ? 'rnews' : 'pnews') + '/'; href += p.id + '/i/' + '7476' + '/pp/' + self.iteration + '/' + self.page + '/?h=' + encodeURIComponent(p.hash); } else { href += '//' + p.mirror + '/ghits/'; href += p.id + '/i/' + '5003' + '/' + self.TW + '/pp/' + self.iteration + '/' + self.page + '/' + p.key + '?h=' + encodeURIComponent(p.hash); } } var vars = [ [/\{\*.*?\*\}/, ''], [/\{\$href\}/g, 'href="' + href + '"'], [/\{\$pmc_item\}/, self.id], [/\{\$target\}/g, 'target="_blank"'], [/\{\$source\}/g, p.source], [/\{\$src\}/g, (type == 'news' ? 'width="200" height="200"' : 'width="200" height="200"') + ' src="'+ p.other["i"]+'"'], [/\{\$title\}/g, self.VS(p.title)], [/\{\$desc\}/g, self.XL(p.desc)], [/\{\$iteration\}/g, self.iteration], [/\$iteration/g, self.iteration], [/this\.iteration/g, self.iteration], [/\{\$price\}/g, p.price], [/\{\$priceold\}/g, p.priceold], [/\{\$discount\}/g, p.discount], [/\{if \$priceold\}/g, "{if '' != p.priceold.replace(new RegExp('[^0-9.]'), '')}"], [/\{if \$price != " "\}/g, "{if p.price != ' '}"], [/\{if \$price == " "\}/g, "{if p.price == ' '}"], [/\$priceold/g, p.priceold], [/\$price/g, p.price], ]; for (var i = 0 ; i < vars.length; i++) { callbackText = callbackText.replace(vars[i][0], vars[i][1]); } while (true) { var x = callbackText; var r = /\{if ([^\}]*?)\}(((?!\{(?:\/)?if).)*)\{\/if\}/g; callbackText = callbackText.replace(r, function(str, p1, p2) { if (eval(p1)) { return p2; } else { return ""; } }); if (x == callbackText) break; } this.iteration++; return callbackText; } else { self.BB[p.id]++; return ""; } } }; this.generateTemplate = function(templateText, type) { self["templateText" + type] = templateText; self["templateFunc" + type] = function(inf, json) { var parts = /(.*)?\{foreach\}(.*)?\{\/foreach\}(.*)?/.exec(self["templateText" + type]); var template = typeof(parts[1]) != 'undefined' ? parts[1] : ''; for (var i = 0; i < json.length; i++) { template += inf.renderItem(json[i], parts[2], type); } template += typeof(parts[3]) != 'undefined' ? parts[3] : ''; return template; }; return true; }; this.init = function() { if (this.root) { this.getCookie(); var cookie = this.YR["page"]; this.LP = this.root.getElementsByTagName('a'); var pageOffset = (this.GB.AdskeeperPageOffset ? parseInt(this.GB.AdskeeperPageOffset) : 0); var tmpType = this.YR["mg_type"] ? this.YR["mg_type"] : this.DW; var pagesCountNews = 20; var pagesCountGoods = 20; var pagesCount = (tmpType == 'news') ? pagesCountNews : pagesCountGoods; if(cookie!=null&&parseInt(cookie)<pagesCount&&parseInt(cookie)>0) this.page=parseInt(cookie)+1; else if (parseInt(cookie)>(pagesCount-1)||parseInt(cookie)<1) this.page=1+pageOffset; if ((new Date()).getTime() - (this.YR['time']!=undefined ? this.YR['time'] : 0) >= 6e5) this.page = 1+pageOffset; if (!this.page) this.page=1; this.pageUnlim = this.page - 1; this.YR["page"] = this.page; this.setCookie(); if (!this.GB.document.cookie) { var dt = new Date(); this.page = dt.getSeconds()%pagesCount+1; } this.blockId = this.YR["mg_id"] ? this.YR["mg_id"] : this.FM; this.blockType = this.YR["mg_type"] ? this.YR["mg_type"] : this.DW; if (this.PV[this.blockType + this.blockId]) this.subdomain = this.PV[this.blockType + this.blockId]; else { this.subdomain = this.HP[this.DW]; this.blockId = this.FM; this.blockType = this.DW; } this.WP = '//'+this.subdomain+'-'+this.blockType.substr(0,1)+'b.'+this.OW[this.blockType]+'/'+this.blockId+'/'; var protocol = self.GB.document.location.protocol; self.webProtocol = protocol.indexOf("http") != -1 ? protocol : "http:"; self.clickTracking = typeof(self.GB.MGClickTracking) != 'undefined' ? self.GB.MGClickTracking : ""; if (!self.generateTemplate(self.templateTextNews, 'News') || !self.generateTemplate(self.templateTextGoods, 'Goods')) { return; } for (var i=0; i<this.MQ.length; i++) { this[this.MQ[i]](); } } }; this.QJ = function(forceShow, refresh) { var script = this.GB.document.createElement('script'); script.type = 'text/javascript'; script.charset = 'utf-8'; if (forceShow) { this.WP = '//'+this.subdomain+'-'+this.blockType.substr(0,1)+'b.'+this.OW[this.blockType]+'/fs/'+this.blockId+'/'; } script.src = this.WP + this.page; if (refresh) { self.requestParams.rsh = "rsh=1"; } if (this.GB.MGi != undefined) { self.requestParams.geo = "geo=" + this.GB.MGi; } self.requestParams.pv = "pv=" + this.protocols[this.blockType]; self.requestParams.cbuster = "cbuster=" + (this.GB.MG_CacheBuster ? this.GB.MG_CacheBuster : ((new Date().getTime()) + '' + Math.floor((Math.random() * 1000000000) + 1))); if (script.src.indexOf('?') == -1) { script.src += '?'; } else { script.src += '&'; } var params = []; for (var key in self.requestParams) { params.push(self.requestParams[key]); } params.push('ref=' + encodeURIComponent(this.GB.document.referrer)); script.src += params.join("&"); (this.realRoot != undefined ? this.realRoot : this.root).parentNode.appendChild(script); }; this.TI = function(style, container) { style = style.replace(/((?:^|}|,)\W*)((?:\w+)?\.(?:mc|mg)[\-\w]+)/g, "$1" + this.getMainCssSelector() + " $2"); if (style == "") return; if (!container) { var MGst = container ? container : this.GB.document.createElement('style'); MGst.type = 'text/css'; if (MGst.styleSheet) { MGst.styleSheet.cssText = style; } else { MGst.appendChild(this.GB.document.createTextNode(style)); }; (this.realRoot != undefined ? this.realRoot : this.root).parentNode.appendChild(MGst); } else { var MGst = container; if (MGst.styleSheet) { MGst.styleSheet.cssText = style; } else { while (MGst.firstChild) { MGst.removeChild(MGst.firstChild); } MGst.appendChild(this.GB.document.createTextNode(style)); }; } }; this.start = function() { if (self.root && self.YI == 0) { self.QJ(); } }; this.addEvent = function(elem, type, handler) { if (elem.addEventListener) { elem.addEventListener(type, handler, false) } else { elem.attachEvent('on' + type, handler) } }; this.getMainCssSelector = function() { return "#" + (this.realRoot ? this.realRoot.id : this.root.id); } }; var mgCanLoad20361 = false; var mgFallback20361 = false; if (document.getElementById("MG_ID")) mgCanLoad20361 = true; if (document.getElementById("AdskeeperComposite20361")) { mgCanLoad20361 = true; mgFallback20361 = true; } if (mgCanLoad20361) { if (!mgFallback20361) { var rootId20361 = document.getElementById("MG_ID").innerHTML; var div20361 = parent.window.document.createElement('div'); div20361.id = "AdskeeperComposite20361"; parent.window.document.getElementById("AdskeeperScriptRootC" + rootId20361).appendChild(div20361); AdskeeperInfC20361 = new AdskeeperBaseBlockC20361("AdskeeperComposite20361", parent.window, false, rootId20361); } else { AdskeeperInfC20361 = new AdskeeperBaseBlockC20361("AdskeeperComposite20361", window, true, 0); } AdskeeperCCookieBlock20361 = function() { var self = this; self.funcBlocks["Cookie"] = "AdskeeperCCookieBlock20361"; this.storageName = "AdskeeperStorage" + (this.GB.AdskeeperPageOffset ? this.GB.AdskeeperPageOffset : ""); this.IV = function() { var matches = this.GB.document.cookie.match(new RegExp("(?:^|; )" + this.storageName + "=([^;]*)")); var res = {}; if (matches) { try { res = AdskeeperJSON.parse(decodeURIComponent(matches[1])); } catch (e) {}; } return res; }; this.getCookie = function() { var value = this.IV(); if (value["C20361"]!=undefined) { this.YR = value["C20361"]; } else this.YR = {}; if (value["0"]!=undefined) { this.ZV = value["0"]; } else this.ZV = {}; }; this.setCookie = function() { var totalCookie = this.IV(); totalCookie["C20361"] = this.YR; totalCookie["0"] = this.ZV; var value = encodeURIComponent(AdskeeperJSON.stringify(totalCookie)); this.GB.document.cookie = this.storageName+"="+value+";path=/"; }; }; AdskeeperCCookieBlock20361.call(AdskeeperInfC20361); AdskeeperCSubnetsBlock20361 = function() { var self = this; self.funcBlocks["Subnets"] = "AdskeeperCSubnetsBlock20361"; this.MQ.push("ZX"); this.TW = ""; this.EAs = {}; this.EAsImages = {}; this.EAsAdvert = {}; this.EAsAdLinkBlocks = {}; this.EAsUtm = {}; this.EAs['2'] = 'adskeeper.co.uk'; this.EAsImages['2'] = 'adskeeper.co.uk'; this.EAsAdvert['2'] = ''; this.EAsAdLinkBlocks['2'] = '<div class="mg_addad%id"><a href="http://adskeeper.co.uk/#1" target="_blank"><img src="//adskeeper.co.uk/logo_adskeeper_s.png" alt="Adskeeper" title="Adskeeper"></a></div><style type="text/css">div.mg_addad%id{text-align: right; opacity: 0.5;} div.mg_addad%id:hover{opacity: 1} div.mg_addad%id a{color: #000000; font:normal 10px Myriad Pro; text-decoration: none;} div.mg_addad%id img{margin-bottom: -5px; border:0px}</style>'; this.EAsUtm['2'] = '?utm_source=widget_adskeeper&utm_medium=text&utm_campaign=add&utm_content='; this.MQ.push("ZX"); var informerData = []; informerData.push({"id": "7476", "etalonId": "0", "protocol": "5", "type": "News", "subnet": "2"}); informerData.push({"id": "5003", "etalonId": "0", "protocol": "5", "type": "Goods", "subnet": "2"}); this.ZX = function() { for (var i = 0; i < informerData.length; i++) { var tickerId = informerData[i].etalonId != "0" && informerData[i].protocol == "4" ? informerData[i].etalonId : informerData[i].id; if ((informerData[i].subnet !== '1') ^ ('2' === '1')) { (function(type) { self.GB["AdskeeperLoad" + type + tickerId] = function(json) { self.LY = type.toLowerCase(); self.TW = '2'; self["AdskeeperLoadNews"](json); }; })(informerData[i].type); if (informerData[i].protocol == "4") { self.GB["AdskeeperRedirectComposite" + tickerId] = function() { self.TW = '2'; self["AdskeeperRedirectComposite"].apply(self, [].slice.call(arguments, 0)); }; } else { self.GB["AdskeeperRedirectComposite20361"] = function() { self.TW = '2'; self["AdskeeperRedirectComposite"].apply(self, [].slice.call(arguments, 0)); }; } } } }; }; AdskeeperCSubnetsBlock20361.call(AdskeeperInfC20361); AdskeeperCMgqBlock20361 = function() { var self = this; self.funcBlocks["Mgq"] = "AdskeeperCMgqBlock20361"; this.isLongCheck = false; this.MQ.push("mgqInit"); this.mgqWorker = function() { for (var i = 0; i < self.GB._mgq.length; i++) { var el = self.GB._mgq[i]; if (typeof(self.GB[el[0]]) == 'function') { self.GB[el[0]].apply(self.GB, el.slice(1)); self.GB._mgq.splice(i, 1); } } if (!self.GB._mgqi) { self.GB._mgqi = self.GB.setInterval(function() { self.mgqWorker(); }, 5); } if (!self.isLongCheck) { if ((new Date()).getTime() - self.GB._mgqt > 10000) { self.isLongCheck = true; self.GB.clearInterval(self.GB._mgqi); self.GB._mgqi = self.GB.setInterval(function() { self.mgqWorker(); }, 100); } } }; this.mgqInit = function() { self.GB._mgq = self.GB._mgq || []; if (typeof(self.GB._mgqp) == 'undefined') { self.GB._mgqp = self.mgqWorker; self.GB._mgqt = (new Date()).getTime(); self.mgqWorker(); } }; }; AdskeeperCMgqBlock20361.call(AdskeeperInfC20361); AdskeeperCAntifraudBlock20361 = function() { var self = this; self.funcBlocks["Antifraud"] = "AdskeeperCAntifraudBlock20361"; this.OV.push("ER"); this.MQ.push("initAntiFraud"); this.SY = ""; this.XE = ""; this.HR = ""; this.KF = ""; this.LW = ""; this.GU = ""; this.MF = ""; this.FJ = ""; this.initAntiFraud = function() { if (this.ZV["svspr"]==undefined) { this.HR = this.RM(this.GB.document.referrer,500); this.ZV["svspr"] = this.HR; this.setCookie(); } else this.HR = this.ZV["svspr"]; if (this.ZV["svsds"]!=undefined) { this.KF = this.ZV["svsds"]; this.KF++; } else this.KF = 1; this.ZV["svsds"] = this.KF; this.setCookie(); var D=new Date(); this.SY = D.getTime() + '20361' + Math.floor(Math.random()*100) + '' + (2*Math.floor(Math.random()*4)+1); this.FJ = D.getTime(); if (this.ZV["TejndEEDj"]==undefined) { this.ZV["TejndEEDj"] = this.x64String(this.SY); this.setCookie(); } }; this.x64String = function(s) { s=s.toString(); s=unescape(encodeURIComponent(s)); var b64c='\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x24\x54\x55\x56\x57\x58\x59\x5a\x61\x62\x63\x64\x65\x2a\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x2b\x2f\x3d'; var b64e=''; var c1,c2,c3,c4,e1,e2,e3,e4; for (var i=0; i<s.length;) { c1=s.charCodeAt(i++); c2=2<<5; e1=c1>>(c2/32); c3=s.charCodeAt(i++); e2=((c1&3)<<(c2/16))|(c3>>(c2/16)); c4=s.charCodeAt(i++); e3=isNaN(c3)?c2:(((c3&15)<<(c2/32))|(c4>>(c2-58))); e4=isNaN(c4)?c2:(c4&(c2-1)); b64e+=b64c.charAt(e1)+b64c.charAt(e2)+b64c.charAt(e3)+b64c.charAt(e4); } return b64e; }; this.TL = function(n) { return n?Math.round(n).toString(16):''; }; this.RM = function(str,n){ return str.length > n ? str.substring(0,n) : str; }; this.backHref = function() { if (AdskeeperInfC20361.LW && AdskeeperInfC20361.GU) AdskeeperInfC20361.GU['\x68\x72\x65\x66']=AdskeeperInfC20361.LW; AdskeeperInfC20361.MF=""; }; this.getCoordsElementOfPage = function(element) { var offsetLeft = 0, offsetTop = 0; do { offsetLeft += element.offsetLeft; offsetTop += element.offsetTop; } while (element = element.offsetParent); return {"x":offsetLeft, "y":offsetTop}; }; this.getCoordsClickOfPage = function(e) { var x = 0, y = 0; if (!e) e = this.GB.event; if (e.pageX || e.pageY) { x = e.pageX; y = e.pageY; } else if (e.clientX || e.clientY) { x = e.clientX + (this.GB.document.documentElement.scrollLeft || this.GB.document.body.scrollLeft) - this.GB.document.documentElement.clientLeft; y = e.clientY + (this.GB.document.documentElement.scrollTop || this.GB.document.body.scrollTop) - this.GB.document.documentElement.clientTop; } return {"x":x, "y":y}; }; this.VF = function() { return window.navigator.javaEnabled() ? 1 : 0; }; this.TF = function() { var flashEnabled = 0; if (typeof(navigator.plugins)!="undefined" && typeof(navigator.plugins["Shockwave Flash"])=="object") { flashEnabled = 1; } else if (typeof window.ActiveXObject != "undefined") { try { if (new ActiveXObject("ShockwaveFlash.ShockwaveFlash")) { flashEnabled = 1; } } catch(e) {}; } return flashEnabled; }; this.addParams = function(event, link) { if (link.className && link.className.indexOf("mg_addad")>=0) return; var D=new Date(); var e=event||this.GB.event; var coordClickOfPage = this.getCoordsClickOfPage(e); var b=link.getBoundingClientRect(); var coordLinkOfPage = this.getCoordsElementOfPage(link); var d=this.GB.document; if (!(link.href.indexOf('pnews') != -1 || link.href.indexOf('ghits') != -1)) return; var MG_p=/pp\/([0-9]+)\/([0-9]+)\/(k\/)?(?:s\/\d+\/(?:n\/\d+\/(?:x\/\d+\/)?)?)?#k([0-9]+)\??(\S*)/; var MG_nn=MG_p.exec(link.href); this.LW=link.href; this.GU=link; if (MG_nn) link.href = link.href.replace(MG_p, 'pp/' + MG_nn[1] + '/' + MG_nn[2] + '/' +(MG_nn[3]?MG_nn[3]:'') + (MG_nn[5]?'?'+MG_nn[5]+'&':'?') + 'k=' + MG_nn[4] + 'f'); else { var index = link.href.indexOf('?k=20361f'); if (index != -1) { link.href = link.href.substr(0, index) + '?k=20361f'; } else { index = link.href.indexOf('&k=20361f'); if (index != -1) { link.href = link.href.substr(0, index) + '&k=20361f'; } else { index = link.href.indexOf('?'); if (index != -1) { link.href += '&k=20361f'; } } } } var RJ = 0; if (this.GB.opera) RJ+=1; if (this.GB.opera&&this.GB.opera.buildNumber) RJ+=2; if (this.GB.document.all||this.GB.MSStream) RJ+=4; if (!this.GB.btoa||this.GB.navigator.msPointerEnabled) RJ+=8; if (this.GB.chrome) RJ+=16; if (this.GB.mozInnerScreenX!=undefined) RJ+=32; if (!this.GB.external) RJ+=64; var GY=''; for (var i=1;i<=Math.ceil((RJ+1)/68)*31;i++) { if((i%26==0)||((i%26==6)&&(((i%26)+5)%11==0)))continue; GY+=(i==1?'':String.fromCharCode(102))+String.fromCharCode(96+(i%26))+String.fromCharCode(83); var FZ=''; if(i>31)break; switch(i){ case 1:FZ=this.SY;break; case 2:FZ=this.TL(b.bottom);break; case 3:FZ=this.TL(this.FJ);break; case 4:FZ=this.TL(D.getTime());break; case 5:FZ=this.TL(d.body.clientheight);break; case 7:FZ=this.TL(e.clientX);break; case 8:FZ=this.TL(e.clientY);break; case 9:FZ=this.TL(b.left);break; case 11:FZ=this.TL(b.top);break; case 12:FZ=this.TL(d.body.clientheight-e.clientY);break; case 13:FZ=this.TL(b.right-b.left);break; case 14:FZ=this.TL(b.bottom-b.top);break; case 15:FZ=this.MF;break; case 16:FZ=this.TL(e.clientY);break; case 17:FZ=this.TL(RJ);break; case 18:FZ=this.TL(link['\x64\x61\x74\x61\x2d\x72\x65\x6C']);break; case 19:FZ=this.RM(d.location.href,500);break; case 20:FZ=this.RM(d.referrer,500);break; case 21:FZ=this.HR;break; case 22:FZ=this.TL(this.KF);break; case 23:FZ=this.TL(coordClickOfPage.x);break; case 24:FZ=this.TL(coordClickOfPage.y);break; case 25:FZ=this.TL(coordLinkOfPage.x);break; case 27:FZ=this.TL(coordLinkOfPage.y);break; case 28:FZ=this.TL(this.VF());break; case 29:FZ=this.TL(this.TF());break; case 30:FZ=this.TL(window.screen.width);break; case 31:FZ=this.TL(window.screen.height);break; } GY+=this.x64String(FZ); } link['\x64\x61\x74\x61\x2d\x72\x65\x6C']=''; link['\x68\x72\x65\x66']=link['\x68\x72\x65\x66']+encodeURIComponent(GY); }; this.linkClick = function(event) { AdskeeperInfC20361.addParams(event, this); AdskeeperInfC20361.GB.setTimeout(AdskeeperInfC20361.backHref,100); return true; }; this.linkMouseOver = function(event) { AdskeeperInfC20361.addParams(event, this); var v=parseInt(this['\x64\x61\x74\x61\x2d\x72\x65\x6C'])?parseInt(this['\x64\x61\x74\x61\x2d\x72\x65\x6C']):0; if (v%2!=1) this['\x64\x61\x74\x61\x2d\x72\x65\x6C']=v+1; }; this.MV = function(event) { var v=parseInt(this['\x64\x61\x74\x61\x2d\x72\x65\x6C'])?parseInt(this['\x64\x61\x74\x61\x2d\x72\x65\x6C']):0; if ((v>>1)%2!=1) this['\x64\x61\x74\x61\x2d\x72\x65\x6C']=v+2; }; this.ER = function() { if (this.root) { this.LP = this.root.getElementsByTagName('a'); } for (var MG_l in this.LP) { this.LP[MG_l].onmouseup = this.linkClick; this.LP[MG_l].onmouseover = this.linkMouseOver; this.LP[MG_l].onmousemove = this.MV; } }; }; AdskeeperCAntifraudBlock20361.call(AdskeeperInfC20361); AdskeeperCResponsiveBlock20361 = function() { var self = this; self.funcBlocks["Responsive"] = "AdskeeperCResponsiveBlock20361"; self.OV.push("responsiveInit"); self.responsiveInit = function() { self.ElementQueries.init(); self.fixGetElementsByClassNameHandler(self.root); if (!self.fakeMode) { self.fixPrices(); setTimeout(function() { self.fixFlexbox(); }, 100); } }; self.fixElementPrice = function(element) { var priceArray = element.getElementsByClassName("mcpriceouter"); for (var i = 0; i < priceArray.length; i++) { var parent = priceArray[i].parentNode; var oldPriceArray = parent.getElementsByClassName("mcpriceold"); if (priceArray[i].getBoundingClientRect()['bottom'] >= parent.getBoundingClientRect()['bottom']) { for (var j = 0; j < oldPriceArray.length; j++) { oldPriceArray[j].style.display = 'none'; } } else { for (var j = 0; j < oldPriceArray.length; j++) { oldPriceArray[j].style.display = 'inline-block'; if (priceArray[i].getBoundingClientRect()['bottom'] >= parent.getBoundingClientRect()['bottom']) { oldPriceArray[j].style.display = 'none'; } } } } }; self.fixPrices = function() { var elements = self.root.getElementsByClassName("mgline"); for (var i = 0; i < elements.length; i++) { (function(element) { self.fixElementPrice(element); element.resizeSensor = new self.ResizeSensor(element, function() { self.fixElementPrice(element); }); })(elements[i]); } }; self.fixFlexbox = function() { var s = self.GB.document.body || self.GB.document.documentElement, s = s.style; if (s.webkitFlexWrap == '' || s.msFlexWrap == '' || s.flexWrap == '') return true; var elements = self.root.getElementsByClassName("mgline"); for (var i = 0; i < elements.length; i++) { elements[i].style.height = "auto"; } setTimeout(function() { var maxH = 0; for (var i = 0; i < elements.length; i++) { var rect = elements[i].getBoundingClientRect(); var elH = rect.bottom - rect.top; if (elH > maxH) { maxH = elH; } } if (elH != 0) { for (var i = 0; i < elements.length; i++) { elements[i].style.height = maxH + "px"; } } self.fixImages(); }, 0); }; self.fixImages = function() { setTimeout(function() { var needToRefresh = false; var els = self.root.getElementsByClassName("mcimg"); for (var i = 0; i < els.length; i++) { if (els[i].tagName == "DIV") { var rect = els[i].getBoundingClientRect(); if (rect.bottom - rect.top <= 25) { needToRefresh = true; els[i].style.display = "none"; (function(el) { setTimeout(function() { el.style.display = "block"; }, 0); })(els[i]); } } } if (needToRefresh) { self.fixFlexbox(); } }, 200); }; /** * ÐÐ°Ð»ÐµÐµ ÑÐ»ÐµÐ´ÑÐµÑ ÐºÐ¾Ð´ Ð¸Ð· https://github.com/marcj/css-element-queries * ÐÐ¾Ð´ Ð¼Ð¾Ð´Ð¸ÑÐ¸ÑÐ¸ÑÐ¾Ð²Ð°Ð½ Ð¿Ð¾Ð´ Ð½Ð°ÑÐ¸ Ð½ÑÐ¶Ð´Ñ, Ð½Ð¾ ÑÑÐµÐ±ÑÐµÑ ÑÐºÐ°Ð·Ð°Ð½Ð¸Ñ Ð»Ð¸ÑÐµÐ½Ð·Ð¸Ð¸ */ /*! Copyright (c) 2013 Marc J. Schmidt Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. */ self.ElementQueries = function() { /** * @param {HTMLElement} element * @constructor */ function SetupInformation(element) { this.element = element; this.options = {}; var key, option, width = 0, height = 0, value, actualValue, attrValues, attrValue, attrName; /** * @param {Object} option {mode: 'min|max', property: 'width|height', value: '123px'} */ this.addOption = function(option) { var idx = [option.mode, option.property, option.value].join(','); this.options[idx] = option; }; var attributes = ['min-width', 'min-height', 'max-width', 'max-height']; /** * Extracts the computed width/height and sets to min/max- attribute. */ this.call = function() { width = this.element.offsetWidth; height = this.element.offsetHeight; attrValues = {}; for (key in this.options) { if (!this.options.hasOwnProperty(key)){ continue; } option = this.options[key]; value = parseFloat(option.value); actualValue = option.property == 'width' ? width : height; attrName = option.mode + '-' + option.property; attrValue = ''; if (option.mode == 'min' && actualValue >= value) { attrValue += option.value; } if (option.mode == 'max' && actualValue <= value) { attrValue += option.value; } if (!attrValues[attrName]) attrValues[attrName] = ''; if (attrValue && -1 === (' '+attrValues[attrName]+' ').indexOf(' ' + attrValue + ' ')) { attrValues[attrName] += ' ' + attrValue; } } for (var k in attributes) { if (attrValues[attributes[k]]) { this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1)); } else { this.element.removeAttribute(attributes[k]); } } }; } /** * @param {HTMLElement} element * @param {Object} options */ function setupElement(element, options) { if (element.elementQueriesSetupInformation) { element.elementQueriesSetupInformation.addOption(options); } else { element.elementQueriesSetupInformation = new SetupInformation(element); element.elementQueriesSetupInformation.addOption(options); element.elementQueriesSensor = new self.ResizeSensor(element, function() { element.elementQueriesSetupInformation.call(); }); } element.elementQueriesSetupInformation.call(); } /** * @param {String} selector * @param {String} mode min|max * @param {String} property width|height * @param {String} value */ function queueQuery(selector, mode, property, value) { var query; if (self.root.querySelectorAll && self.root.querySelectorAll.bind) query = self.root.querySelectorAll.bind(self.root); if (!query) { return; } var elements = query(selector); for (var i = 0, j = elements.length; i < j; i++) { setupElement(elements[i], { mode: mode, property: property, value: value }); } } var regex = /,?([^,\n]*)\[[\s\t]*(min|max)-(width|height)[\s\t]*[~$\^]?=[\s\t]*"([^"]*)"[\s\t]*]([^\n\s\{]*)/mgi; /** * @param {String} css */ function extractQuery(css) { var match; css = css.replace(/'/g, '"'); while (null !== (match = regex.exec(css))) { if (5 < match.length) { queueQuery(match[1] || match[5], match[2], match[3], match[4]); } } } /** * @param {CssRule[]|String} rules */ function readRules(rules) { var selector = ''; if (!rules) { return; } if ('string' === typeof rules) { rules = rules.toLowerCase(); if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) { extractQuery(rules); } } else { for (var i = 0, j = rules.length; i < j; i++) { if (1 === rules[i].type) { selector = rules[i].selectorText || rules[i].cssText; if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) { extractQuery(selector); }else if(-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) { extractQuery(selector); } } else if (4 === rules[i].type) { readRules(rules[i].cssRules || rules[i].rules); } } } } /** * Searches all css rules and setups the event listener to all elements with element query rules.. */ this.init = function() { for (var i = 0, j = self.GB.document.styleSheets.length; i < j; i++) { try { readRules(self.GB.document.styleSheets[i].cssText || self.GB.document.styleSheets[i].cssRules || self.GB.document.styleSheets[i].rules); } catch(err) { continue; } } }; this.update = function() { this.init(); }; }; self.ElementQueries.update = function() { self.ElementQueries.instance.update(); }; self.ElementQueries.init = function() { if (!self.ElementQueries.instance) { self.ElementQueries.instance = new self.ElementQueries(); } self.ElementQueries.instance.init(); }; self.initElementQueries = function() { self.addEvent(self.GB, "load", function() { self.ElementQueries.init(); }); }; self.ResizeSensor = function(element, callback) { /** * * @constructor */ function EventQueue() { this.q = []; this.add = function(ev) { this.q.push(ev); }; var i, j; this.call = function() { for (i = 0, j = this.q.length; i < j; i++) { this.q[i].call(); } }; } /** * @param {HTMLElement} element * @param {String} prop * @returns {String|Number} */ function getComputedStyle(element, prop) { if (element.currentStyle) { return element.currentStyle[prop]; } else if (self.GB.getComputedStyle) { return self.GB.getComputedStyle(element, null).getPropertyValue(prop); } else { return element.style[prop]; } } /** * * @param {HTMLElement} element * @param {Function} resized */ function attachResizeEvent(element, resized) { if (!element.resizedAttached) { element.resizedAttached = new EventQueue(); element.resizedAttached.add(resized); } else if (element.resizedAttached) { element.resizedAttached.add(resized); return; } element.resizeSensor = self.GB.document.createElement('div'); element.resizeSensor.className = 'resize-sensor'; var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: scroll; z-index: -1; visibility: hidden;'; var styleChild = 'position: absolute; left: 0; top: 0;'; element.resizeSensor.style.cssText = style; element.resizeSensor.innerHTML = '<div class="resize-sensor-expand" style="' + style + '">' + '<div style="' + styleChild + '"></div>' + '</div>' + '<div class="resize-sensor-shrink" style="' + style + '">' + '<div style="' + styleChild + ' width: 200%; height: 200%"></div>' + '</div>'; element.appendChild(element.resizeSensor); if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) { element.style.position = 'relative'; } var expand = element.resizeSensor.childNodes[0]; var expandChild = expand.childNodes[0]; var shrink = element.resizeSensor.childNodes[1]; var lastWidth, lastHeight; var reset = function() { expandChild.style.width = expand.offsetWidth + 10 + 'px'; expandChild.style.height = expand.offsetHeight + 10 + 'px'; expand.scrollLeft = expand.scrollWidth; expand.scrollTop = expand.scrollHeight; shrink.scrollLeft = shrink.scrollWidth; shrink.scrollTop = shrink.scrollHeight; lastWidth = element.offsetWidth; lastHeight = element.offsetHeight; }; reset(); var changed = function() { if (element.resizedAttached) { element.resizedAttached.call(); } }; self.addEvent(expand, 'scroll', function() { if (element.offsetWidth > lastWidth || element.offsetHeight > lastHeight) { changed(); } reset(); }); self.addEvent(shrink, 'scroll',function() { if (element.offsetWidth < lastWidth || element.offsetHeight < lastHeight) { changed(); } reset(); }); } if ("[object Array]" === Object.prototype.toString.call(element) || ('undefined' !== typeof jQuery && element instanceof jQuery) || ('undefined' !== typeof Elements && element instanceof Elements) ) { var i = 0, j = element.length; for (; i < j; i++) { attachResizeEvent(element[i], callback); } } else { attachResizeEvent(element, callback); } }; }; AdskeeperCResponsiveBlock20361.call(AdskeeperInfC20361); AdskeeperCCountersBlock20361 = function() { var self = this; self.funcBlocks["Counters"] = "AdskeeperCCountersBlock20361"; this.MQ.push("ZR"); this.ZR = function() { }; }; AdskeeperCCountersBlock20361.call(AdskeeperInfC20361); AdskeeperCAdvertLinkBlock20361 = function() { var self = this; self.funcBlocks["AdvertLink"] = "AdskeeperCAdvertLinkBlock20361"; this.BS.push("refreshAdvertLink"); this.MQ.push("loadAdvertLink"); this.advertLinkNeeded = false; this.loadAdvertLink = function() { if (this.GB.document.getElementById('mg_add20361')) this.advertLinkNeeded = true; else this.advertLinkNeeded = false; }; this.refreshAdvertLink = function() { if (this.advertLinkNeeded) { } else { this.OD = ''; } }; }; AdskeeperCAdvertLinkBlock20361.call(AdskeeperInfC20361); AdskeeperCMonitorBlock20361 = function() { var self = this; self.funcBlocks["Monitor"] = "AdskeeperCMonitorBlock20361"; this.OV.push("monitorInit"); this.shownBlocks = {}; this.monitorInterval = null; this.monitorInit = function() { var regex = /\/\/img.*\/[\d]+\/([\d]+).*\.(jpg|gif)/; if (!this.monitorInterval) { this.monitorInterval = self.GB.setInterval(function() { var newBlocks = {}; var images = self.root.getElementsByTagName('IMG'); for (var i = 0; i < images.length; i++) { if (self.isElementInViewport(images[i])) { var res = regex.exec(images[i].src); if (res && res[1] && !self.shownBlocks[res[1]]) { var teaserBlock = self.getParentTeaserBlock(images[i]); if (teaserBlock) { var teaserDims = teaserBlock.getBoundingClientRect(); newBlocks[res[1]] = { width: Math.round(teaserDims['right'] - teaserDims['left']), height: Math.round(teaserDims['bottom'] - teaserDims['top']), desc: self.isTeaserElementVisible(teaserBlock, 'mcdesc'), price: self.isTeaserElementVisible(teaserBlock, 'mcprice'), domain: self.isTeaserElementVisible(teaserBlock, 'mcdomain') }; } else { newBlocks[res[1]] = { width: "-", height: "-", desc: false, price: false, domain: false }; } self.shownBlocks[res[1]] = 1; } } } self.prepareCappingData(newBlocks); }, 1000); } }; this.prepareCappingData = function(blocks) { var typePrefix = "&t=" + (self.LY == 'news' ? "N" : "G"); var data = ""; var counter = 0; for (var i in blocks) { var prefix = blocks[i].width + "|" + blocks[i].height + "|" + ((blocks[i].desc ? 1 : 0) + (blocks[i].price ? 2 : 0) + (blocks[i].domain ? 4 : 0)) + "|"; data += "&v=" + prefix + self.teaserHashes[i]; counter++; if (counter > 20) { self.sendCappingData(typePrefix + data); data = ""; counter = 0; } } if (data != "") { self.sendCappingData(typePrefix + data); } }; this.sendCappingData = function(data) { var img = document.createElement('IMG'); img.src = "//c.mgid.com/c?pv=2" + data; }; this.isElementInViewport = function(el) { var rect = el.getBoundingClientRect(); return ( rect.top >= 0 && rect.left >= 0 && rect.bottom <= (self.GB.innerHeight || self.GB.document.documentElement.clientHeight) && rect.right <= (self.GB.innerWidth || self.GB.document.documentElement.clientWidth) ); }; this.getParentTeaserBlock = function(el) { var current = el; while (current != self.root && current != self.GB) { if (current.className.indexOf("mgline") >= 0) { return current; } else { current = current.parentNode; } } return null; }; this.isTeaserElementVisible = function(el, className) { self.fixGetElementsByClassNameHandler(el); var elements = el.getElementsByClassName(className); if (elements.length > 0) { var dims = elements[0].getBoundingClientRect(); if (dims.right - dims == 0 || dims.bottom - dims.top == 0) { return false; } else { return true; } } else { return false; } }; }; AdskeeperCMonitorBlock20361.call(AdskeeperInfC20361); AdskeeperInfC20361.init(); AdskeeperInfC20361.start(); } 