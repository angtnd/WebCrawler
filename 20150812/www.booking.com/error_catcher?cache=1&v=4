
(function( win, doc ) {

    var errors     = [],
        errorCount = 0,
        canParse   = Function().toString && /bkg/.test( function() { bkg; } );

    var NOW,
        UNDEF;

    var SERVER_ASKED_TO_BLOCK = readCookie( 'error_catcher' ) === 'kill';

    var SHOULD_BLOCK = function( error ) {

        return SERVER_ASKED_TO_BLOCK || error.index > 2;

    };

    var ERROR_TRANSPORT = {

        URL: '/js_errors',
        METHOD: 'POST',
        MAX_STACK_LINES: 12,
        MAX_STACK_LENGTH: 900,
        MAX_FUNCTION_BODY_LENGTH: 150,
        STACK_TRUNCATED_TEXT: '(... truncated!)',

        SEND_ONLY_IF: function() {

            return !!doc.getElementById( 'req_info' );

        },

        IS_BOT: function( message ) {

            return getKey( '$u.b01' ) || getKey( 'booking_extra.bot' ) || /^Not implemented/.test( message );

        },

        THIRD_PARTY: {

            ADD_PREFIX: function( thirdPartyKey ) {

                return '3rd_' + thirdPartyKey + ': ';

            },

            SOURCE_MAPPING: {

                'http://cond01.etbxml.com/cond/common.js': 'cheapHotelFinder',
                'fls.doubleclick.net/activity': 'google_floodlight',
                'google-analytics.com/analytics.js': 'google_analytics_universal',
                'doubleclick.net/dc.js': 'google_analytics_classic',
                'gstatic': 'google_maps',
                'google': 'google',
                'clicktale': 'clicktale',
                'criteo': 'criteo',
                'usabilla': 'usabilla',
                'utag.js': 'teallium',
                'wac.edgecastcdn.net': 'whilokii',
                'wizebar': 'wizebar',
                'facebook': 'facebook',
                'superfish': 'superfish',
                'jollywallet': 'jollywallet',
                'blockpage': 'blockpage',
                'datafastguru': 'datafastguru',
                'griddy': 'griddy',
                'showpass': 'showpass',
                'mscimg': 'cdet',
                'triggit': 'triggit',
                'autotag': 'autotag',
                'conduit': 'conduit',
                'mzroute': 'mzroute',
                'twitter': 'twitter',
                'cloudfront.net/scripts/ld.js': 'cloudfront'

            },

            MESSAGE_MAPPING: {

                'npobject': 'GeckoPlugin',
                'dealply': 'DealPlyChromePlugin',
                'ns_error_xpc': 'GeckoPlugin',
                '_watcherready': 'IEPlugin',
                '__fCheck': 'MobilePlugin',
                '__iactive': 'MobilePlugin',
                '_watcherReady': 'AvastPlugin',
                'wit_OnDocumentLoad': 'WitmainFirefoxPlugin',
                'wit_OnBeforeDocumentLoad': 'WitmainFirefoxPlugin',
                'KasperskyLab': 'KasperskyPlugin',
                'SetReturnValue': 'FlashPlugin'

            },

            STACK_TRACE_MAPPING: {

                'chrome-extension://': 'ChromePlugin',
                'kw__injectedscriptmin': 'UnknownPlugin',
                'datafastguru': 'datafastguru',
                '__fCheck': 'MobilePlugin',
                '__iactive': 'MobilePlugin',
                '__dxutils': 'MobilePlugin',
                'npobject': 'GeckoPlugin',
                '_watcherReady': 'AvastPlugin',
                'wit_OnDocumentLoad': 'WitmainFirefoxPlugin',
                'wit_OnBeforeDocumentLoad': 'WitmainFirefoxPlugin',
                'KasperskyLab': 'KasperskyPlugin',
                'SetReturnValue': 'FlashPlugin',
                'FO_ADJUSTSCALE': 'GeckoPlugin',
                'determineyourroad': 'determineyourroad'

            }

        }

    };

    var ERROR_DATA_COLLECTION = {

        /*
         * If the property redefined via defineError is a function we're always passing as arguments: message, url, line, column and error.
         * Same arguments that get passed to the onerror handler.
         */

        invalidate_cache: function() {
            return +new Date;
        },

        error: function( message, url, line, column, error, caller ) {

            var stack       = this.getErrorStackTrace( error, caller, message ) || '',
                errorGroup  = this.getErrorGroup( stack, caller ),
                source      = this.getErrorSourceFromStack( error && error.stack ) || this.getErrorSource( message, url ) || win.document.location.href.split( '?' )[ 0 ] || '',
                thirdParty;

            if ( ERROR_TRANSPORT.IS_BOT( message ) ) {
                return 'B0T: ' + message;
            }

            thirdParty = thirdPartyCheck( message, stack, source );

            if ( thirdParty.is ) {
                return ERROR_TRANSPORT.THIRD_PARTY.ADD_PREFIX( 'Party_External_Script_Error' ) + thirdParty.key + thirdPartyBreakDownLabel( thirdParty.key ) + stack;
            }

            if ( ! /(villas|booking|bstatic)\.com/i.test( source ) ) {
                return ERROR_TRANSPORT.THIRD_PARTY.ADD_PREFIX( 'Party_External_Script_Error' ) + 'External Source' + thirdPartyBreakDownLabel( 'External Source' ) + stack;
            }

            return errorGroup + ( getErrorMessage( message, error ) || 'Script error' ) + stack;

        },

        url: function( message, url, line, column, error ) {
            return this.getErrorSourceFromStack( error && error.stack ) || this.getErrorSource( message, url ) || win.document.location.href.split( '?' )[ 0 ];
        },

        lno: function( message, url, line, column, error ) {
            return Number( line ) ? line : this.getFileOffsetFromError( error ).line || this.UNDEF;
        },

        cno: function( message, url, line, column, error ) {
            return Number( column ) ? column : this.getFileOffsetFromError( error ).column || this.UNDEF;
        },

        pid: function() {

            return getKey( 'booking_extra.pageview_id' ) ||
                   getKey( 'booking.PAGEVIEW_ID' )       ||
                   getKey( 'BOOKING_PAGEVIEW_ID' )       ||
                   getKey( 'booking.env.pageview_id' )   ||
                   getKey( '$u.js_data.PAGEVIEW_ID' )    ||
                   '(unknown_page_id)';

        },

        stid: function() {
            return getKey( 'booking_extra.b_stid' );
        },

        ch: function() {
            return getKey( 'booking_extra.b_ch' );
        },

        ref_action: function() {
            return getKey( 'booking_extra.b_action' );
        },

        stype: function() {
            return getKey( 'booking_extra.b_site_type_id' );
        },

        aid: function() {
            return getKey( 'booking_extra.b_aid' );
        },

        lang: function() {
            return getKey( 'booking_extra.b_lang_for_url' );
        },

        scripts: function() {

            var page,
                pageData,
                str = '{',
                scripts = getKey( 'booking.env.scripts_tracking' ) || {};

            for ( page in scripts ) if ( scripts.hasOwnProperty( page ) ) {

                pageData = scripts[ page ];
                str += '"' + page + '":{"loaded":' + !!pageData.loaded + ',"run":' + !!pageData.run + '},';

            }

            str = str.slice( 0, -1 ) + '}';

            if ( str.length === 1 ) {
                return '';
            }

            return str;

        },

        since: function() {

            var timer = win.PageLoadTimer;

            return timer ? NOW - timer.start : UNDEF;

        },

        ready: function() {

            var timer = win.PageLoadTimer;

            if ( ! timer ) {
                return UNDEF;
            }

            return timer.document_ready - timer.start ? timer.document_ready - timer.start : 0;

        },

        loaded: function() {

            var timer = win.PageLoadTimer;

            if ( ! timer ) {
                return UNDEF;
            }

            return timer.window_load - timer.start ? timer.window_load - timer.start : 0;

        },

        info: function() {

            var info = doc.getElementById( 'req_info' );

            return info ? info.innerHTML : UNDEF;

        },

        errc: function() {
            return this.error.index + 1;
        },

        errp: function() {

            var currentIndex,
                previousIndex,
                previous;

            if ( ! this.error ) {
                return 0;
            }

            currentIndex  = this.error.index;
            previousIndex = currentIndex - 1;

            if ( currentIndex === 0 || previousIndex < 0 ) {
                return 0;
            }

            previous = this.errors[ previousIndex ];

            return previous ? previous.index + 1 : 0;

        },

        stack_trace: function( message, url, line, column, error, caller ) {

            return getErrorStackTrace( error );

        }

    };

    win.onBookingError = win.onerror = function() {

        if ( win.onBookingError.skip === true ) {
            win.onBookingError.skip = false;
            return;
        }

        var args = [].slice.apply( arguments ),
            ctxt = this,

            call = function() {

                onError.apply( ctxt, args );

            };

        args.push( getFunctionCaller( arguments ) );

        if ( ERROR_TRANSPORT.SEND_ONLY_IF() ) {

            call();

        } else {

            setTimeout( call, 100 );

        }

    };

    /*
     * Enabling plugins
     */

    win.onerror.plugins = true;

    win.onerror.defineError = function( ERROR_DATA_COLLECTION_PLUGIN ) {

        // We don't want to let random keys to be reported. We must control this.
        // That's why the extend function only allows key overwriting not addition.
        extend( ERROR_DATA_COLLECTION, ERROR_DATA_COLLECTION_PLUGIN );

    };

    win.onerror.defineTransport = function( ERROR_TRANSPORT_PLUGIN ) {

        extend( ERROR_TRANSPORT, ERROR_TRANSPORT_PLUGIN );

    };

    win.onerror.errorCollection = function() {

        return errors.slice();

    };

    win.onerror.report = function( message, group, path ) {

        var fnc = function() {};

        fnc.__bookingGroupName__ = group;

        win.onerror( message, path || '', 0, 0, {}, fnc );

    };

    /*
     * Init
     */
    if ( 'app' !== 'app' ) {
        initWrapping();
    }

    /*
     * Error phases
     */

    function onError() {

        var error = { index: errorCount++ },
            args  = [].slice.apply( arguments );

        if ( SHOULD_BLOCK( error ) ) {
            return false;
        }

        errors.push( error );

        collectData( error, args );

        send( error );

        return false;

    }

    function collectData( error, args ) {

        var context = {

                UNDEF:                    UNDEF,
                ERROR_TRANSPORT:          ERROR_TRANSPORT,

                errors:                   errors,
                error:                    error,

                getErrorStackTrace:       getErrorStackTrace,
                getFunctionCaller:        getFunctionCaller,
                getErrorSource:           getErrorSource,
                getErrorGroup:            getErrorGroup,
                parseFunctionBody:        parseFunctionBody,
                parseFunctionName:        parseFunctionName,
                getFileOffsetFromError:   getFileOffsetFromError,
                getErrorSourceFromStack:  getErrorSourceFromStack,
                thirdPartyCheck:          thirdPartyCheck,
                thirdPartyBreakDownLabel: thirdPartyBreakDownLabel,
                languageBreakDownLabel:   languageBreakDownLabel,
                getErrorMessage:          getErrorMessage

            },

            key,
            value;

        NOW = +new Date;

        for ( key in ERROR_DATA_COLLECTION ) if ( ERROR_DATA_COLLECTION.hasOwnProperty( key ) ) {

            value = ERROR_DATA_COLLECTION[ key ];

            if ( typeof value === 'function' ) {
                value = value.apply( context, args );
            }

            if ( typeof value !== 'undefined' && value !== '' ) {
                error[ key ] =  value;
            }

        }

    }

    function send( error ) {

        beacon({

            url:    ERROR_TRANSPORT.URL,
            method: ERROR_TRANSPORT.METHOD,
            error:  serialize( error )

        }, function( responseText, responseStatus ) {

            if ( +responseStatus === 503 || responseText === 'shut up' ) {
                SERVER_ASKED_TO_BLOCK = true;
                createCookie( 'error_catcher', 'kill', 30 );
            }

        });

    }

    function initWrapping() {

        function jQueryWrap( jQuery ) {

            // Making sure we wrap jQuery only once
            win.onerror.jQueryWrap = jQueryWrap = Function();

            try {

                var HANDLER_INDEX = '__booking__handler__index__';

                var handlers = {},
                    count    = 0;

                var onAvailable = typeof jQuery.fn.on !== 'undefined';

                var method = {
                    on:   onAvailable ? 'on'  : 'bind',
                    off:  onAvailable ? 'off' : 'unbind',
                    ajax: 'ajax'
                };

                replaceMethod( jQuery.fn, method.on, function( args, index ) {

                    var arg = args[ index ],
                        wrapped;

                    if ( typeof arg !== 'function' ) {
                        return;
                    }

                    wrapped = wrapFunction( arg );

                    handlers[ count ] = args[ index ] = wrapped;

                    arg[ HANDLER_INDEX ] = count;

                    count += 1;

                });

                replaceMethod( jQuery.fn, method.off, function( args, index ) {

                    var arg = args[ index ],
                        count;

                    if ( typeof arg !== 'function' ) {
                        return;
                    }

                    count = arg[ HANDLER_INDEX ];

                    args[ index ] = handlers[ count ] || arg;

                    delete handlers[ count ];

                });

                replaceMethod( jQuery, method.ajax,

                    function handleOptions( args, index ) {

                        var options = args[ index ];

                        if ( ({}).toString.apply( options ) === '[object Object]' ) {

                            forEachIn( 'success error complete beforeSend', function( callback ) {
                                options[ callback ] = wrapFunction( options[ callback ] );
                            });

                        }

                    },

                    function handlePromiseStates( promise ) {

                        forEachIn( 'done fail always then', replaceMethod, promise );

                    }

                );

            } catch ( e ) {}

        }

        try {

            var currentSetTimeout  = win.setTimeout,
                currentSetInterval = win.setInterval,
                start              = +new Date;

            if ( currentSetTimeout ) {
                win.setTimeout = function() {
                    var args = Array.prototype.slice.call(arguments);
                    args[0] = wrapFunction(args[0]);
                    if (currentSetTimeout.apply) {
                        return currentSetTimeout.apply(this, args);
                    } else { // because of IE8 and below
                        return currentSetTimeout(args[0], args[1]);
                    }
                };
            }

            if ( currentSetInterval ) {
                win.setInterval = function( fnc, delay ) {
                    var args = Array.prototype.slice.call(arguments);
                    args[0] = wrapFunction(args[0]);
                    if (currentSetInterval.apply) {
                        return currentSetInterval.apply(this, args);
                    } else { // because of IE8 and below
                        return currentSetInterval(args[0], args[1]);
                    }
                };
            }

            if ( ! win.console ) {
                win.console = { info: Function(), log: Function(), dir: Function() };
            }

            (function frontendReady() {

                if (

                     win.B &&
                     win.sNSStartup &&
                     win.B[ win.sNSStartup ] &&
                     win.B[ win.sNSStartup ].execute

                ) {

                    win.B[ win.sNSStartup ].execute = function( handler, config ) {
                        return wrapFunction( handler ).call( config );
                    };

                } else if ( win.document.readyState !== 'complete' && ( (+new Date - start) < (15 * 1000) ) ) {

                    setTimeout( frontendReady, 0 );

                }

            })();

            (function jQueryReady() {

                if ( 'jQuery' in win ) {

                    jQueryWrap( win.jQuery );

                } else if ( win.document.readyState !== 'complete' && ( (+new Date - start) < (15 * 1000) ) ) {

                    setTimeout( jQueryReady, 0 );

                }

            })();

        } catch( e ) {

            /* This shouldn't happen but there's
             * no problem if the wrappers are not applied
             * we'll simply have less info about the error
             */

        }

        // Publishing the wrapper to make it possible when AMD is used
        win.onerror.jQueryWrap = jQueryWrap;

    }

    /*
     * Wrapping helpers
     */

    function wrapFunction( fnc ) {

        var wrapper = typeof fnc === 'function' ? function() {

            try {

                 return fnc.apply( this, [].slice.apply( arguments ) );

            } catch ( e ) {

                win.onerror( e.message, e.sourceURL, e.line, e.column, e, fnc );

                if ( 'console' in win ) {

                    console.log( getErrorStackTrace( e, fnc ) || 'Uncaught Error: ' + e.message );
                    if ( typeof console.trace === 'function' ) {
                        console.trace();
                    }

                }

            }

        } : fnc;

        return wrapper;

    }

    function forEachIn( items, callback, context ) {

        var i,
            len,
            params,
            list = items.split( ' ' );

        for ( i = 0, len = list.length; i < len; i += 1 ) {

            params = context ? [ context, list[ i ] ] : [ list[ i ] ];

            callback.apply( null, params );

        }

    }

    function replaceMethod( obj, name, handlerCallback, resultCallback ) {

        var original;

        if ( ! name || typeof obj[ name ] !== 'function' ) {
            return;
        }

        original = obj[ name ];

        obj[ name ] = function() {

            var args  = [].slice.apply( arguments ),
                index = args.length,
                arg,
                result;

            while ( index-- ) {

                arg = args[ index ];

                if ( arg ) {

                    if ( typeof handlerCallback === 'function' ) {
                        handlerCallback( args, index );
                    } else if ( typeof arg === 'function' ) {
                        args[ index ] = wrapFunction( arg );
                    }

                }

            }

            result = original.apply( this, args );

            if ( typeof resultCallback === 'function' ) {
                resultCallback( result );
            }

            return result;

        };

    }

    /*
     * Helpers
     */

    function thirdPartyBreakDownLabel( key ) {

        return '\n<j<s<' + key + '>s>j>';

    }

    function languageBreakDownLabel( language ) {

        return '\n<l<a<n<g<' + language + '>g>n>a>l>';

    }

    function thirdPartyCheck( message, stack, url ) {

        var source     = ( getErrorSource( message, url ) || '' ).toLowerCase(),
            thirdParty = ERROR_TRANSPORT.THIRD_PARTY || {},
            pattern;

        for ( pattern in thirdParty.SOURCE_MAPPING ) {

            if ( source.indexOf( pattern ) !== -1 ) {

                return {
                    is: true,
                    key: thirdParty.SOURCE_MAPPING[ pattern ]
                };

            }

        }

        for ( pattern in thirdParty.STACK_TRACE_MAPPING ) {

            if ( stack.indexOf( pattern ) !== -1 ) {

                return {
                    is: true,
                    key: thirdParty.STACK_TRACE_MAPPING[ pattern ]
                };

            }

        }

        message = message || '';
        message += '';
        message = message.toLowerCase();

        for ( pattern in thirdParty.MESSAGE_MAPPING ) {

            if ( message.indexOf( pattern ) !== -1 ) {

                return {
                    is: true,
                    key: thirdParty.MESSAGE_MAPPING[ pattern ]
                };

            }

        }

        return {
            is: false,
            key: ''
        };

    }

    function sanitizeStackLength( stackText ) {

        var stack,
            lines;

        if ( ! stackText ) {
            return '';
        }

        stack = stackText.split( '\n' );
        lines = stack.splice( 0, ERROR_TRANSPORT.MAX_STACK_LINES );

        return ( '\n' + lines.join( '\n' ) ).slice( 0, ERROR_TRANSPORT.MAX_STACK_LENGTH ) + ( stack.length ? ERROR_TRANSPORT.STACK_TRUNCATED_TEXT : '' );

    }

    function getErrorStackTrace( error, functionCaller, message ) {

        var stack,
            lines,
            file,
            name,
            fileOffset;

        if ( ! error ) {
            return '';
        }

        message = getErrorMessage( message, error );

        if ( functionCaller && message ) {

            lines = [];

            while ( functionCaller ) {

                name       = functionCaller.name || parseFunctionName( functionCaller ) || parseFunctionBody( functionCaller ) || 'anonymous';
                file       = getErrorSourceFromStack( error.stack ) || getErrorSource( message, extractUrlSearch( win.document.location.href ) );
                fileOffset = getFileOffsetFromError( error );

                lines.push( name + '@(' + file + ':' + fileOffset.line + ':' + fileOffset.column + ')' );

                try {
                    functionCaller = functionCaller.caller;
                } catch ( e ) { // Strict Mode Enabled
                    functionCaller = false;
                }

            }

            if ( lines.length ) {

                lines = [ '<Generated Stack>' ].concat( lines ).concat( [ '</Generated Stack>\n' ] );

                stack = lines.join( '\n' ) + ( error.stack || '' );

                return sanitizeStackLength( stack );

            }

        }

        return sanitizeStackLength( error.stack );

    }

    function getErrorGroup( stack, caller ) {

        var callerName,
            callerSource;

        if ( typeof caller === 'function' ) {
            callerName   = caller.name || parseFunctionName( caller );
            callerSource = parseFunctionBody( caller );
        }

        var location           = win.document.location || {},
            host               = location.hostname || '',
            path               = location.pathname || '',
            file               = ( stack.match( /\/\/[^/]+(\/[^: ]+):(\d+):(\d+)/ ) || [ '', '' ] )[ 1 ].split( '?' )[ 0 ] || ( host + path ),
            functionName       = callerName || ( stack.match( /(?:at)?\s+([0-9a-zA-Z_]+)[\s@]+(?:\(?https?:)?\/\/[^/]+\/[^: ]+:\d+:\d+/ ) || [] )[ 1 ],
            functionSource     = callerSource || ( stack.match( /(function\([^\)]*\)\{[^@]+\})@(?:\(?https?:)?\/\/[^/]+\/[^: ]+:\d+:\d+/i ) || [] )[ 1 ],
            functionIdentifier = ( ! functionSource && ! /^(at|code|function)$/i.test( functionName ) && functionName ) || functionSource || 'anonymous';

        file.replace( /(\.v[a-zA-Z0-9]+v\.)js$/, '.js' );

        if ( typeof caller === 'function' && caller.__bookingGroupName__ ) {
            functionIdentifier = caller.__bookingGroupName__;
        }

        return 'FULL_STACK_' + file + '->' + functionIdentifier + '():';

    }

    function getKey( path ) {

        var keys    = path.split( /[. ]/ ),
            objName = keys[ 0 ],

            i, len,

            value = win[ objName ];

        for ( i = 1, len = keys.length; i < len; i += 1 ) {

            if (

                defined( value ) &&
                /^\[object (Object|Function|Array|global|HTMLDocument)\]$/.test( ({}).toString.apply( value ) )

            ) {

                value = value[ keys[ i ] ];

            } else {

                return defined( value ) ? value : UNDEF;

            }

        }

        return defined( value ) ? value : UNDEF;

    }

    function defined( variable ) {

        return typeof variable !== 'undefined';

    }

    function extend( source, extension ) {

        var attr;

        for ( attr in extension ) {

            if (
                source.hasOwnProperty( attr ) &&
                extension.hasOwnProperty( attr )
            ) {

                source[ attr ] = extension[ attr ];

            }

        }

    }

    function serialize( obj ) {

        var serialized = [],

            key,
            value;

        for ( key in obj ) if ( obj.hasOwnProperty( key ) ) {
            serialized.push( key + '=' + win.encodeURIComponent( obj[ key ] ) );
        }

        return serialized.join( '&' );

    }

    function beacon( config, onResponse ) {

        var request,
            url = config.url;

        try {
            request = new win.XMLHttpRequest();
        } catch( e ) {}

        if ( ! request ) {

            try {
                request = new win.ActiveXObject( 'Microsoft.XMLHTTP' );
            } catch( e ) {}

        }

        if ( config.method !== 'POST' ) {
            url += '?' + config.error;
        }

        request.open( config.method, url, true );
        request.setRequestHeader( 'Content-type', 'application/x-www-form-urlencoded' );

        request.onreadystatechange = function () {
            if ( request.readyState === 4 ) {
                onResponse( request.responseText, request.status );
            }
        };

        request.send( config.error );

    }

    function extractUrlPath( url ) {

        var path = ( url.match( /\/\/[^/]+(\/[^?]+)/ ) || [] )[ 1 ];

        return path || url;

    }

    function extractUrlSearch( url ) {

        return ( url || '' ).split( '?' )[ 0 ];

    }

    function getErrorMessage( message, error ) {

        return message ? message : ( error ? error.message : '' );

    }

    function getErrorSource( message, url ) {

        return message && message.srcElement && message.srcElement.src && typeof message.srcElement.src === 'string' ? message.srcElement.src : url;

    }

    function getErrorSourceFromStack( stack ) {

        return ( ( stack || '' ).match( /((?:https?:)?\/\/[^/]+\/[^: ]+):(\d+):(\d+)/ ) || [ '', '' ] )[ 1 ].split( '?' )[ 0 ];

    }

    function getFileOffsetFromError( error ) {

        if ( ! error ) {
            return { line: 0, column: 0 };
        }

        var offset = ( error.stack || '' ).match( /:(\d+)(?::(\d+))?/ ) || [ 0, 0, 0 ],
            line   = Math.abs( error.number ? +error.number : 0 ) || offset[ 1 ] || 0,
            column = offset[ 2 ] || 0;

        return {
            line:   +line,
            column: +column
        };

    }

    function getFunctionCaller( args ) {

        var caller,
            undef;

        try {

            caller = args && args.callee && args.callee.caller ? args.callee.caller : undef;

        } catch ( e ) { /* Strict Mode Enabled */ }

        return caller;

    }

    function parseFunctionName( fnc ) {

        var source;

        if ( ! canParse || typeof fnc !== 'function' ) {
            return '';
        }

        source = fnc.toString();

        return ( source.match( /function\s+([a-zA-Z0-9_]+)\s*\(/ ) || [] )[ 1 ] || '';

    }

    function parseFunctionBody( fnc ) {

        var source;

        if ( ! canParse ) {
            return '';
        }

        source = fnc.toString()
                    .replace( /[\n\r\t\s@]+/g, '' )
                    .slice( 0, -1 )
                    .slice( 0, ERROR_TRANSPORT.MAX_FUNCTION_BODY_LENGTH ) + ' ... }';

        return source;

    }

    /* PPK's cookie scripts: http://www.quirksmode.org/js/cookies.html */
    function createCookie( name, value, days ) {

        var expires = '';

        if ( days ) {
            var date = new Date();
            date.setTime( date.getTime() + ( days * 24 * 60 * 60 * 1000 ) );

            expires = '; expires=' + date.toGMTString();
        }

        doc.cookie = name + '=' + value + expires + '; path=/';

    }

    function readCookie( name ) {

        var cookies = doc.cookie.split( ';' ),
            cookie,

            i, len;

        name = name + '=';

        for( i = 0, len = cookies.length; i < len; i += 1 ) {

            cookie = cookies[ i ];

            while ( cookie.charAt( 0 ) === ' ' ) {
                cookie = cookie.substring( 1, cookie.length );
            }

            if ( cookie.indexOf( name ) === 0 ) {
                return cookie.substring( name.length, cookie.length );
            }

        }

        return null;

    }

})( this, this.document );

