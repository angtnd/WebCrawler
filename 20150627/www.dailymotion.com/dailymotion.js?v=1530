/*globals define, hapyak, requirejs*/
define([
    'require',
    'module'
], function (
    require,
    module,
    undefined
) {
    'use strict';

    var moduleConfig = module.config();

    function normalizeParameters(p) {
        if (!p.apiKey) {
            p.apiKey = moduleConfig.apiKey;
        }
        if (!p.environment) {
            p.environment = moduleConfig.environment;
        }
        if (!p.plugins) {
            p.plugins = moduleConfig.plugins;
        }
        return p;
    }

    return {
        viewer: function (p) {
            if (!p.videoType) {
                p.videoType = 'dailymotion';
            }
            if (!p.playerType) {
                if (p.playerMode === 'flash') {
                    p.playerType = 'dailymotioninternal';
                } else if (p.playerMode === 'api') {
                    p.playerType = 'dailymotion';
                }
            }
            p = normalizeParameters(p);
            return hapyak.viewer(p);
        },
        editor: function (p) {
            if (!p.videoType) {
                p.videoType = 'dailymotion';
            }
            p = normalizeParameters(p);
            return hapyak.editor(p);
        },
        externalEditor: function (player, container, p) {
            requirejs.config({
                context: 'hapyak',
                paths: {
                    'lodash': 'vendor/lodash.min',

                    'app.edit.i18n': 'api/sideeditor/i18n/i18n',
                    'app.edit.i18n.translations': [
                        'api/sideeditor/i18n/lang/' + ((p && p.lang) || 'en'),
                        'api/sideeditor/i18n/lang/en'
                    ],

                    'app.edit.components': 'api/sideeditor/components',
                    'app.edit.ember.extend': 'api/sideeditor/ember.extend',
                    'app.edit.hapyak.api': 'api/sideeditor/hapyak.api',
                    'app.edit.hapyak.normalize': 'api/sideeditor/hapyak.normalize',
                    'app.edit.hapyak.repair': 'api/sideeditor/hapyak.repair',
                    'app.edit.mixins': 'api/sideeditor/mixins',
                    'app.edit.routes': 'api/sideeditor/routes',
                    'app.edit.spinner': 'api/sideeditor/spinner',
                    'app.edit.templates': hapyak.environment !== 'dev' ||
                        !hapyak.debug ? 'api/sideeditor/generated/precompiled' : 'api/sideeditor/templates',

                    'app.edit.views': 'api/sideeditor/views',
                    'app.edit.view.annotation': 'api/sideeditor/views/annotation',
                    'app.edit.view.annotation.edit': 'api/sideeditor/views/annotation_edit',

                    'app.edit.view.modal': 'api/sideeditor/views/modal',
                    'app.edit.view.modal.confirm': 'api/sideeditor/views/confirm_modal',
                    'app.edit.view.modal.delete': 'api/sideeditor/views/delete_modal',
                    'app.edit.view.modal.save': 'api/sideeditor/views/save_modal',

                    'app.edit.view.hotlink': 'api/sideeditor/views/hotlink',
                    'app.edit.view.pop': 'api/sideeditor/views/pop',
                    'app.edit.view.userfollow': 'api/sideeditor/views/userfollow',
                    'app.edit.view.videopreview': 'api/sideeditor/views/videopreview',

                    'bootstrap.affix': 'vendor/bootstrap3/affix',
                    'bootstrap.alert': 'vendor/bootstrap3/alert',
                    'bootstrap.button': 'vendor/bootstrap3/button',
                    'bootstrap.carousel': 'vendor/bootstrap3/carousel',
                    'bootstrap.collapse': 'vendor/bootstrap3/collapse',
                    'bootstrap.dropdown': 'vendor/bootstrap3/dropdown',
                    'bootstrap.modal': 'vendor/bootstrap3/modal',
                    'bootstrap.popover': 'vendor/bootstrap3/popover',
                    'bootstrap.scrollspy': 'vendor/bootstrap3/scrollspy',
                    'bootstrap.tab': 'vendor/bootstrap3/tab',
                    'bootstrap.tooltip': 'vendor/bootstrap3/tooltip',
                    'bootstrap.transition': 'vendor/bootstrap3/transition',

                    'bootstrap.colorpicker': 'vendor/bootstrap-colorpicker',
                    'bootstrap.editable': 'vendor/bootstrap-editable',

                    'jed': 'vendor/jed',
                    'spin': 'vendor/spin'
                },
                shim: {
                    'ember': {
                        deps: ['jquery.noconflict', 'handlebars'],
                        exports: 'Ember'
                    },
                    'app.edit.templates': ['ember.noconflict']
                }
            });

            // if not in debug mode, load the built version of the side panel
            if (!hapyak.debug) {
                requirejs.config({
                    context: 'hapyak',
                    paths: {
                        'api/sideeditor/app.edit.sidepanel': 'generated/app.edit.sidepanel.built'
                    }
                });
            }

            require(['jquery.noconflict'], function ($) {
                hapyak.asset.css([
                    '//storage.googleapis.com/hapyak-assets/symbolset/ss-symbolicons-block.css',
                    '//storage.googleapis.com/hapyak-assets/symbolset/ss-standard.css'
                ], false);

                hapyak.asset.css(hapyak.assets + '/css/generated/sideeditor.css');

                require(['api/sideeditor/app.edit.sidepanel'], function (editor) {
                    editor(player, container);
                });
            });
        }
    };
});
