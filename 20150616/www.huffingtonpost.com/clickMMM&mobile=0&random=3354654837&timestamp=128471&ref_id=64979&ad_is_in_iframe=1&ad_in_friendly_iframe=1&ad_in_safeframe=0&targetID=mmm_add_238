
//////////////////////////////////////////////////////////////////////////////////////////
// En logique objet on dÃ©fini l'interface "EventDispatcher" que toutes nos classes vont
// implÃ©menter
if( typeof(mmm_EventDispatcherDefined) == "undefined" ){	
	// si u = bubbling, alors il est inutile de le garder pour des objets Ã  moins que l'on
	// souhaite (avec une procÃ©dure parentale) diffuser l'Ã©vÃ©nement aux parents
	// on supprime tout evenement dÃ©jÃ  mis en place pour la fonction (utile seulement pour mettre
	// Ã  jour la persistance)
	mmm_ed_addEventListener=function(t,l,b,p){ // valeur par dÃ©faut de [b]bubbling = false [p]persistant = true
		if (!this.e[t]){
			this.e[t]=[];
		}else {
			this.removeEventListener (t, l);
		}
		var p_def = (typeof(p) == "undefined") ? true : !!p;
		this.e[t].push ({func:l, persistant:p_def});
	};
	mmm_ed_removeEventListener=function(t,l){
		if (this.e[t]) {
			var iterator = 0, found = false;
			while (this.e[t][iterator] && !found) {
				if (l === this.e[t][iterator].func) {
					found = true;
					this.e[t].splice (iterator,1);
				}
				else{
					iterator++;
				}
			}
		}
	};
	mmm_ed_dispatchEvent=function(t, data){
		if (this.e[t]) {
			var iterator = 0;
			while (this.e[t][iterator]) {
				this.e[t][iterator].func (data);
				if (this.e[t][iterator]) {
					if (!this.e[t][iterator].persistant) {
						this.e[t].splice (iterator,1);
					}
					else{
						iterator++;
					}
				}
			}
		}
	};
	mmm_ed_removeAllEventListener=function(t){
		this.e[t]=null;
	};
	mmm_EventDispatcherDefined = true;
}



//if (params.exclusif && Dispositif_ExpandOptimiseVisibilite) {
//	throw ("Useless double insertion of ad code");
//}

//////////////////////////////////////////////////////////////////////////////////////////
// ici je donne un nom spÃ©cifique Ã  ma classe de dispositif car je suppose qu'il y aura
// du code spÃ©cifique, si on arrive Ã  dÃ©finir un meta langage de scÃ©nario et Ã  passer
// du code spÃ©cifique en paramÃ¨tre alors on pourra idÃ©alement la renommer Dispositif

function Dispositif_ExpandOptimiseVisibilite(params,publicName){

	// pour implÃ©mentation de la pseudo-interface de EventDispatcher
	this.e={};

	if( typeof(Dispositif_ExpandOptimiseVisibilite._initialized) == "undefined"){
		// pour implÃ©mentation de la pseudo-interface de EventDispatcher
		Dispositif_ExpandOptimiseVisibilite.prototype.addEventListener			= mmm_ed_addEventListener;
		Dispositif_ExpandOptimiseVisibilite.prototype.removeEventListener		= mmm_ed_removeEventListener;
		Dispositif_ExpandOptimiseVisibilite.prototype.dispatchEvent				= mmm_ed_dispatchEvent;
		Dispositif_ExpandOptimiseVisibilite.prototype.removeAllEventListener	= mmm_ed_removeAllEventListener;

		//////////////////////////////////////////////////////////////////////////////////
		// interface publique
		// installer, desinstaller, interagir
		//
		Dispositif_ExpandOptimiseVisibilite.prototype.installer = function(){
			mmmlog("Dispositif_ExpandOptimiseVisibilite.installer()");
			this.installationEnCours = true;
			if(this.testDebitRequis && this.utils.debit == -1){
				mmmlog('attente dÃ©bit...');
				this.debitPret=false;
			}
			
			if(this.params.politeDownload && document.readyState != "complete") {
				for (var format in this.formats) {
					if (this.formats[format].params.targetID && this.formats[format].params.targetID != ""){
						var imgPoliteSrc = this.formats[format].params.prePoliteMediaFile;
						if (imgPoliteSrc && imgPoliteSrc != "") {
							var imgPolite = document.createElement ("img");
							imgPolite.src=imgPoliteSrc;
							imgPolite.id = this.name + "_" + format;
							var target = document.getElementById(this.formats[format].params.targetID);
							if (target) {
								target.appendChild (imgPolite);
							}
						}
					}
				}
				var self = this;
				this.attendreChargementWindow = true;
				this.utils.element_addListener (window, "load", function (){
					for (var format in self.formats) {
						if (self.formats[format].params.targetID && self.formats[format].params.targetID != ""){
							var politeImg = document.getElementById (self.name + "_" + format);
							if (politeImg) {
								politeImg.parentNode.removeChild (politeImg);
							}
						}
					}
					self.attendreChargementWindow = false;
					self.installerReel();
				}, false, false);
			}

			var f_main = this.formats.f_main;
			// cibleDOM non null quand body est en targetID
			if (f_main.params.targetID && f_main.params.targetID != "" && f_main.cibleDOM == null){
				this.testCiblef_mainRequis=true;
				var self = this, interval=null, essai=0, essaisMax = 30, // 3s
					recupererTarget = function (){
					f_main.cibleDOM = document.getElementById(f_main.params.targetID);
				}
				recupererTarget();
				if (!f_main.cibleDOM){
					interval = window.setInterval (function (){
						recupererTarget ();
						essai++;
						if (f_main.cibleDOM || essai > essaisMax){
							window.clearInterval (interval);
							if (f_main.cibleDOM) {
								self.ciblef_mainPret=true;
								self.installerReel();
							}
						}
					}, 100);
					this.ciblef_mainPret=false;
				}
			}
			var expand = this.formats.f_expand;
			if (expand.params.targetID && expand.params.targetID != "" && expand.cibleDOM == null){
				this.testCibleExpandRequis=true;
				var self = this, intervalExpand=null, essaiExpand=0, essaisExpandMax = 30, // 3s
					recupererTargetExpand = function (){
						expand.cibleDOM = document.getElementById(expand.params.targetID);
				}
				recupererTargetExpand();
				if (!expand.cibleDOM){
					intervalExpand = window.setInterval (function (){
						recupererTargetExpand ();
						essaiExpand++;
						if (expand.cibleDOM || essaiExpand > essaisExpandMax){
							window.clearInterval (intervalExpand);
							if (expand.cibleDOM) {
								self.cibleExpandPret=true;
								self.installerReel();
							}
						}
					}, 100);
					this.cibleExpandPret=false;
				}
			}

			if (!this.debitPret || !this.ciblef_mainPret || !this.cibleExpandPret){
				return false;
			}
			return this.installerReel();
		};

		//////////////////////////////////////////////////////////////////////////////////
		// installerReel
		//
		Dispositif_ExpandOptimiseVisibilite.prototype.installerReel = function(){

			mmmlog("Dispositif_ExpandOptimiseVisibilite.installerReel()");
			var f_main = this.formats.f_main,
				f_expand = this.formats.f_expand;
			if( this.installationEnCours == false ){ return false; }
			if((this.testDebitRequis && !this.debitPret)
				|| (this.testCiblef_mainRequis && !this.ciblef_mainPret)
				|| this.attendreChargementWindow ){ return false; }
			try{
				if( f_main.installer("COLLAPSED") ){
					if( f_expand.params.etats["EXPANDED"].crea.expandOnStart ){
						if(!f_expand.installer("EXPANDED")){
							return false;
						}
						var autoExpandDuration = parseInt(f_expand.params.etats["EXPANDED"].crea.autoExpandDuration);
						if(autoExpandDuration > 0 ) { // implicitement gÃ¨re le NaN si problÃ¨me isNaN
							var self = this;
							this.autoFermetureExpand = window.setTimeout (function (){
								self.fermerExpand();
							}, autoExpandDuration);
						}
					}
					else if (!f_expand.installer("COLLAPSED")) {
						return false;
					}
				}
				else{ 
					f_main.installer("BACKUP");
					this.sendStatRaw(this.params.adserving.countTagBackup);
				}
			}
			catch(e){
					mmmlog('--- exception raised during installation : ');
					mmmlog(e);
					return false;
			}
			var thirdPartyExposure = this.params.adserving.thirdPartyExposure;
			if (thirdPartyExposure && thirdPartyExposure.expositionInitial && thirdPartyExposure.expositionInitial.indexOf ("http") != -1) {
				this.sendStatRaw (this.params.adserving.thirdPartyExposure.expositionInitial);
			}
			this.installationEnCours = false;
			return true;
		}
		Dispositif_ExpandOptimiseVisibilite.prototype.desinstaller = function(jouerFin){
			mmmlog("Dispositif_ExpandOptimiseVisibilite.desinstaller("+jouerFin+")");
			try{
				this.formats.f_main.desinstaller();
				this.formats.f_expand.desinstaller();
				if (this.params.onRemove) {
					this.params.onRemove ();
				}
			}catch(e){
				mmmlog(e);
				return false;
			}
			return true;
		};

		//////////////////////////////////////////////////////////////////////////////////
		// interagir
		//	
		Dispositif_ExpandOptimiseVisibilite.prototype.interagir = function(params){
			mmmlog("Dispositif_ExpandOptimiseVisibilite.interagir("+params+")");
		};
		
		//////////////////////////////////////////////////////////////////////////////////
		// interface privÃ©e
		// constructeur
		//
		Dispositif_ExpandOptimiseVisibilite.prototype.constructeur = function(){
			
			this.preparerSite(); // potentiellement, on peut y fixer this.formats.f_main.targetID et donc placer nos formats oÃ¹ l'on veut
			
			// parcours des formats pour voir si test de dÃ©bit requis
			var params = this.params;
			for (var f in params.formats){
				if (typeof(params.formats[f].etats) != "object") continue;
				for (var e in params.formats[f].etats){
					if (typeof(params.formats[f].etats[e]) != "object") continue;
					if (params.formats[f].etats[e].eligibilite){
						this.testDebitRequis = this.testDebitRequis || (params.formats[f].etats[e].eligibilite.debit && params.formats[f].etats[e].eligibilite.debit > 0);
					}
				}
			}
			var self = this;
			if (this.testDebitRequis && this.utils.debit == -1){
				this.utils.testDebit(params.urlPing,params.urlDebit);
				this.utils.addEventListener ("debit_fini", function(){
					mmmlog('fin du test de dÃ©bit > installerReel');
					self.debitPret=true;
					self.installerReel();
				});
			}
			
			// les pixels de comptage third-party
			var self = this;
			for( var i=0; i < params.adserving.countTags.length; i++){
				var pixel = params.adserving.countTags[i];
				window.setTimeout((function(pixel){ return function(){ 
					self.sendStatRaw(pixel);
					mmmlog('countag envoyÃ© : '+pixel);
				} })(pixel),100);
			}
			
			try{
				var formats = this.formats;
				formats.f_main = new Format_OptimiseVisibilite(params.formats.f_main, this.name+'.formats','f_main',this);
				formats.f_main.addEventListener('creaEvent', function(data){ self.traiterEvenementCrea (data, formats.f_main); } );
				
				formats.f_expand = new Format_OptimiseVisibilite(params.formats.f_expand, this.name+'.formats','f_expand',this);
				formats.f_expand.addEventListener('creaEvent', function(data){ self.traiterEvenementCrea (data, formats.f_expand); } );
			}catch(e){
				mmmlog(e);
			}
		};
		
		//////////////////////////////////////////////////////////////////////////////////
		// preparerSite
		//
		Dispositif_ExpandOptimiseVisibilite.prototype.preparerSite = function(){
			mmmlog("Dispositif_ExpandOptimiseVisibilite.preparerSite()");
			var qs = window.location.href.match("\\?.+");
			if (qs) {
				qs = qs[0].toLowerCase();
				var formats = this.params.formats,
					backup=qs.indexOf("backup=1")!= -1,
					debugArea=qs.indexOf("debugarea=1")!= -1,
					debugFlash=qs.indexOf("debugflash=1")!= -1,
					debugJs=qs.indexOf("debugjs=1")!= -1;
				if (backup || debugArea || debugFlash) {
					for (var f in formats) {
						for (var e in formats[f].etats) {
							if (backup) {
								var eligibilite=this.params.formats[f].etats[e].eligibilite;
								if (eligibilite)
									eligibilite.debit=100000;
							}
							var crea=this.params.formats[f].etats[e].crea;
							if (debugArea){
								if (crea.flashVars) {
									crea.flashVars = crea.flashVars.replace (/\&debugArea=./, "");
									crea.flashVars += "&debugArea=1";
								}
							}
							if (debugFlash){
								if (crea.flashVars) {
									crea.flashVars = crea.flashVars.replace (/\&debug=./, "");
									crea.flashVars += "&debug=1";
								}
							}
						}
					}
				}
				if (backup){
					this.utils.debit=0;
				}
				if (debugJs) {
					this.params.debug=1;
				}
			}
			var params = this.params;
			if (params.iframeContext.ad_is_in_iframe && !params.iframeContext.ad_in_friendly_iframe && !params.iframeContext.ad_in_safeframe) {
				this.expandAutorise = false;
			}
			else if (params.iframeContext.ad_in_friendly_iframe) {
				var iframeDom = document.getElementById (params.iframeContext.targetID).nextSibling;
				if (iframeDom.tagName && iframeDom.tagName == "IFRAME") {
					this.divModificationIframe = document.createElement ("div");
					iframeDom.contentWindow.document.body.appendChild (this.divModificationIframe);
					var self = this;
					this.verifExistanceDiv = window.setInterval (function (){
						// l'objet divModificationIframe n'existe plus dans le DOM mais existe en tant que variable javascript, pour vÃ©rifier sa disparition dans le DOM, il suffit de vÃ©rifier s'il a un parent
						if (!self.divModificationIframe.parentNode) {
							self.desinstaller ();
							window.clearInterval (self.verifExistanceDiv);
							iframeDom.style.display="block";
						}
					}, 100);	
				}
			}
			 
			if (typeof ($sf) != "undefined") { // deuxiÃ¨me verification pour savoir si on est en safeframe au cas ou
				params.iframeContext.ad_in_safeframe = true;
			}
			if (params.iframeContext.ad_in_safeframe) {
				try {
					var self = this,
						paveStyle = params.formats.f_main.etats["COLLAPSED"].crea.style;
					$sf.ext.register(parseInt (paveStyle.width)||0, parseInt(paveStyle.height)||0, function(status, data){
						// fonction de callback pour chaque fonction appelÃ© de l'API
						// TODO verifier le retour pour expand et collapse
					}); // parseInt est concu pour retournÃ© le chiffre trouvÃ© Ã  partir du premier caractÃ¨re d'un chaine (sinon retourne NaN)
				}
				catch(e) {
					mmmlog ("Dispositif_ExpandOptimiseVisibilite.prototype.preparerSite erreur lors de l'enregistrement du dispositif");
				}
			}
		};

		//////////////////////////////////////////////////////////////////////////////////
		// ouvrirExpand
		//
		Dispositif_ExpandOptimiseVisibilite.prototype.ouvrirExpand = function(){
			var formats = this.formats,
				f_main = formats.f_main,
				f_expand = formats.f_expand;

			this.expandAutorise = false;
			f_main.compteurCrea.stop ();
			
			f_expand.changerEtat ("EXPANDED");
			if (f_expand.etatCrea != "") {
				f_expand.interagir ("mmm_change_state", "formatExpand", "start");
			}

			if (f_expand.ratioContainer && f_expand.canResize && !f_expand.eventAspectRatio) {
				f_expand.eventAspectRatio = function () { f_expand.gererAspectRatio(); }
				MMM_Utilitaires.element_addListener(window, "resize", f_expand.eventAspectRatio, true);
			}

			if (f_main.crea.hideButtonsOnExpand) {
				if (f_expand.etatCrea == "" || f_main.etatCrea == "") {
					this.temporiserExpand = true;
					// nous somme dans le cas ouvrir_expand (!expandEnCours)
					// nous dÃ©sirons cacher les boutons du main
					// la crÃ©a peut Ãªtre soit dans un Ã©tat de fin soit dans un autre Ã©tat
					// force le pave Ã  se mettre Ã  un Ã©tat de lecture afin d'avoir un aspect simmilaire
					/*if (f_main.etatCrea == "end") {
						f_main.interagir("mmm_start");
					}*/
					// puis immÃ©diatement, des boutons et la video
				}
				else{
					f_main.interagir("mmm_change_state", "expanded", "suspend", ["Expand","Video","Playpause","Soundmute","Replay", "Start"],false );
					f_main.interagir("mmm_seek",0);
					f_expand.interagir("mmm_change_state", "formatExpand", "start");
				}
			}
			
			if (this.params.iframeContext.ad_in_safeframe != 0) {
				try {
					var formats_crea = this.params.formats,
						expandStyle = formats_crea.f_expand.etats["EXPANDED"].crea.style,
						paveStyle = formats_crea.f_main.etats["COLLAPSED"].crea.style,
						ecartOffsetLeft = f_expand.support.offsetLeft - f_main.support.offsetLeft,
						ecartOffsetTop = f_expand.support.offsetTop - f_main.support.offsetTop;
					// en thÃ©orie, on ne fait une ouverture que dans une direction donc si nÃ©gatif, l'offetLeft suffit,
					// si positif il faut ajouter l'Ã©cart de taille entre les deux;
					if (ecartOffsetLeft >= 0) {
						ecartOffsetLeft += (parseInt(expandStyle.width) - parseInt(paveStyle.width));
					}
					// attention , pour la certification linkedIn on a remarquÃ© que le css sur l'iframe (top et left) a un impact sur notre demande d'expand
					// ayant aucun moyen d'accÃ©der aux valeurs css (par le dom ou par $sf), il sera nÃ©cessaire de mettre un hack sur ecartOffsetTop.
					if (ecartOffsetTop >= 0) {
						ecartOffsetTop += (parseInt(expandStyle.height) - parseInt(paveStyle.height));
					}
					
					var decalExpandX="l";
					var decalExpandY="b";
					if(ecartOffsetLeft>0){
						decalExpandX="r";
					}
					if(ecartOffsetTop<0){
						decalExpandY="t";
					}
					f_expand.support.style.marginTop="0px";
					var sfExpandParams={};
					sfExpandParams[decalExpandX]=ecartOffsetLeft;
					sfExpandParams[decalExpandY]=ecartOffsetTop;
					$sf.ext.expand(sfExpandParams);
				}
				catch(e){
				}
			}
			this.sendStatEvent ("maximise", 1);
		};

		Dispositif_ExpandOptimiseVisibilite.prototype.fermerExpand = function(){
			var formats = this.formats,
				f_main = formats.f_main,
				f_expand = formats.f_expand;
				
			if (this.autoFermetureExpand){
				window.clearTimeout(this.autoFermetureExpand);
			}
			if (f_expand.eventAspectRatio) {
				MMM_Utilitaires.element_removeListener(window, "resize", f_expand.eventAspectRatio, true);
				f_expand.eventAspectRatio = null;
			}
			// lancer procÃ©dure collapse
			if (this.params.iframeContext.ad_in_safeframe != 0) {
				try {
					$sf.ext.collapse();
				}
				catch (e) {
				}
			}
			var etatPave = "start",
				displayButtons;
			if (f_main.crea.endOnCollapse || f_expand.etatCrea == "end") {
				displayButtons = ["Replay"];
				etatPave = "end";
			}
			else {
				displayButtons = ["Expand","Playpause","Soundmute"];
			}
			if (f_main.crea.hideButtonsOnExpand) {
				if (f_main.etatCrea == "") {
					f_main.crea.hideButtonsOnStart = false;
				}
				else {
					f_main.interagir ("mmm_change_state", "formatCollapse", etatPave, displayButtons,true); // formatCollapse
				}
			}
			else {
				f_main.interagir ("mmm_"+etatPave);
			}
			f_expand.changerEtat("COLLAPSED");
			if (f_expand.etatCrea != "") {
				// mmm_freeze ralentit l'execution en sequentiel, il faut donc le temporiser.
				f_expand.interagir ("mmm_change_state", "collapsed", "suspend", ["Video"], false);
				f_expand.interagir("mmm_seek",0);
			}
			else {
				f_expand.addEventListener ("ready", function (){
					f_expand.interagir ("mmm_change_state", "collapsed", "suspend", ["Video"], false);
					f_expand.interagir("mmm_seek",0);
				});
			}
			this.expandAutorise=false;
			var self = this;
			window.setTimeout (function(){
				self.expandAutorise = true;
			}, 500);
		}
		
		// la fonction permet de dÃ©finir les actions Ã  faire dans l'ensemble du dispositif lorsqu'un Ã©vÃ©nement crÃ©a est reÃ§u
		// /!\ il reste un point Ã  voir concernant la maniÃ¨re de detecter quel est la crÃ©a qui appel la fonction (scope ?)
		//////////////////////////////////////////////////////////////////////////////////
		// traiterEvenementCrea
		//
		Dispositif_ExpandOptimiseVisibilite.prototype.traiterEvenementCrea = function(data_p, format_p){
			var scope = data_p.scope.toLowerCase (), type = data_p.type.toLowerCase (), data = data_p.data,
				paramsCrea = format_p.params.etats[format_p.etatCourant].crea,
				isExpand = (format_p.name.indexOf('f_expand') != -1),
				formats = this.formats,
				f_main = formats.f_main,
				f_expand = formats.f_expand;
			
			mmmlog('D.eventCrea -> format == '+format_p.name+', event == '+scope+'.'+type);
			var self=this;
			function tempoExpand () {
				window.setTimeout (function (){
					try{
						f_main.compteurCrea.start ();
					}catch(e){}
				}, 100);
			}
			
			switch (scope + "." + type) {
				case "video.completion" :
					var stat = 0;
					switch (data.value) {
						case 0 :
							stat = 2;
						break;
						case 25 : 
							stat = 3;
						break;
						case 50 : 
							stat = 4;
						break;
						case 75 : 
							stat = 5;
							var thirdPartyExposure = this.params.adserving.thirdPartyExposure;
							if (thirdPartyExposure && thirdPartyExposure.expositionCritere && thirdPartyExposure.expositionCritere.indexOf ("http") != -1) {
								this.sendStatRaw (thirdPartyExposure.expositionCritere);
							}
						break;
						case 100 : 
							stat = 1;
					}
					if (stat != 0){
						if (isExpand){
							stat += 10;
						}
						mmmlog ("videoIndex : " + data.videoIndex);
						
						if (data.videoIndex){
							stat += 10000 * data.videoIndex;
						}
						this.sendStatEvent ("completion", stat);
					}
					break;
					
				case "custom.completion" :  
					this.sendStatEvent ("completion", data.value);
					break;
				
				case "ui.replay" :
					if (!isExpand) {
						if (!f_main.crea.expandOnReplayState) {
							mmm_dispositif.formats.f_main.interagir("mmm_change_state", "collapse", "replay", ["Replay"], false);
						}
						else {
							if (this.expandAutorise && f_expand.etatCourant != "EXPANDED") {
								this.ouvrirExpand ();
							}
						}
					}
					else {
						format_p.interagir ("mmm_replay");
					}
					this.sendStatEvent ("replay", isExpand?11:1);
					// un setTimeout est nÃ©cessaire pour interrompre la pile d'execution des fonctions liÃ©es
					// voir Guillaume pour questions
					break;
				case "ui.sound_on" :
					this.sendStatEvent ("soundon", isExpand?3:1);
					break;
				case "ui.sound_off" :
					this.sendStatEvent ("soundoff", isExpand?3:1);
					break;
				case "ui.countdown_click" :
					this.ouvrirExpand ();
					break;
				case "rollover.sound_on" :
					this.sendStatEvent ("soundon", isExpand?5:4);
					break;
				case "rollover.collapse" :
					if ((f_main.crea.autoriserExpandAuRolloverALEtatFin || f_main.etatCrea != "end") && f_main.etatCrea != "ready") {
						if (this.expandAutorise && f_expand.etatCourant != "EXPANDED") {
							if (f_main.crea.etatCrea == "" && format_p.crea.countdownDelayToExpand) {
								this.addEventListener ("ready", tempoExpand);
							}
							else {
								if (format_p.crea.countdownDelayToExpand !== undefined && format_p.crea.countdownDelayToExpand > 0) {
									format_p.compteurCrea.start ();
								}
								else {
									this.attenteAvantOuverture = window.setTimeout (function (){
										self.ouvrirExpand();
									}, format_p.crea.expandRollOverDelay);
								}
							}
						}
					}
					break;
				case "rollout.collapse" :
					this.removeEventListener ("ready", tempoExpand);
					if (this.attenteAvantOuverture) {
						window.clearTimeout (this.attenteAvantOuverture);
						self.attenteAvantOuverture = 0;
					}
					if( f_main.compteurCrea != null){
						f_main.compteurCrea.stop ();
					} 
					break;
				case "rollover.expand" :
					break;
				case "rollout.expand" :
					if (f_expand.crea.collapseOnRollout) {
						this.fermerExpand ();
						this.sendStatEvent ("minimise", 1);
					}
					break;
				case "rollover.sound_off" :
					this.sendStatEvent ("soundoff", isExpand?5:4);
					break;
				case "info.countdown_start" :
					if( format_p.compteurCrea != null){
						format_p.compteurCrea.majCountdown (true);
					}else{
						mmmlog('unexpected event from crea : info.countdown_start');
					}
					break;
				case "info.countdown_over" :
					if( format_p.compteurCrea != null){
						format_p.compteurCrea.majCountdown (false);
					}else{
						mmmlog('unexpected event from crea : info.countdown_over');
					}
					this.ouvrirExpand();
					break;
				case "info.countdown_stop" :
					if( format_p.compteurCrea != null){
						format_p.compteurCrea.majCountdown (false);
					}else{
						mmmlog('unexpected event from crea : info.countdown_stop');
					}
					this.expandAutorise = true;
					break;
				case "info.readyforsizeupdate":
					f_expand.canResize = true;
					if (!f_expand.eventAspectRatio) {
						f_expand.eventAspectRatio = function () { f_expand.gererAspectRatio(); }
						MMM_Utilitaires.element_addListener(window, "resize", f_expand.eventAspectRatio, true);
						f_expand.gererAspectRatio();
					}
					break;
				case "format.expand" :
					if (!isExpand) { // protection inutile mais permet de dÃ©finir que seul le flash du pavÃ© peut demander un expand
						if (this.expandAutorise && f_expand.etatCourant == "COLLAPSED") {
							this.ouvrirExpand();
						}
					}
					break;
				case "format.collapse" :
				
					//#TODO : gere les formats VIDEO_SYNCHRONE grace Ã  data.time >> cf mmm_seek : 0
					this.fermerExpand ();
					this.sendStatEvent ("minimise", 2);
					break;
				case "format.ready" :
					if(!isExpand && format_p.crea.type == 'flash'){ this.sendStatInit ("with_"+format_p.crea.type, 0); }
					// si Ã©lÃ©ment dÃ©placÃ© / supprimÃ© . rÃ©affectation si possible, sinon desinstallation
					if (!format_p.creaDOMObject.parentNode) {
						format_p.creaDOMObject = document.getElementById (format_p.creaDOMObject.id);
						if (!format_p.creaDOMObject) {
							this.desinstaller ();
							mmmlog ("ERROR deleted crea not wanted.");
							return;
						}
					}
					format_p.etatCrea = "ready";
					format_p.dispatchEvent ("ready");
					// cas peu probable ou une demande d'expand a Ã©tÃ© faite mais ni le pavÃ© ni l'expand n'Ã©taient initialisÃ©s Ã  ce moment
					if (((!isExpand && f_expand.etatCrea != "") || (isExpand && f_main.etatCrea != "")) && this.temporiserExpand) {
						this.ouvrirExpand();
					}
					if (typeof(paramsCrea.soundOnStart) == "boolean" && paramsCrea.soundOnStart == false) {
						format_p.interagir ("mmm_soundOff");
					}
					if (f_main.crea.hideButtonsOnStart) {
						f_main.interagir ("mmm_show_hide_ui",["Expand","Video","Playpause","Soundmute", "Replay", "Start"],false);
					}
					if( f_expand.params.etats["EXPANDED"].crea.expandOnStart && !isExpand){
						return;
					}
					// gestion de la visibilitÃ©
					if( typeof(paramsCrea.optimVisibilite) == "undefined" || paramsCrea.optimVisibilite == 0 ){
						format_p.interagir ("mmm_start");
						this.sendStatEvent ("maximise", isExpand?200:100);
					}else if(paramsCrea.optimVisibilite == 3){
						this.sendStatEvent ("maximise", isExpand?203:103);
					}else if(paramsCrea.optimVisibilite == 1 || paramsCrea.optimVisibilite == 2){
						if ( this.params.iframeContext.ad_is_in_iframe == 1 && this.params.iframeContext.ad_in_friendly_iframe == 0) { // Xdomain iframe
							if(paramsCrea.optimVisibilite == 1) { // loose
								format_p.interagir ("mmm_start");
								this.sendStatEvent ("maximise", isExpand?201:101);
							}else{ // strict -> dÃ©marrage manuel
								this.sendStatEvent ("maximise", isExpand?203:103);
							}
// TODO Ã  dÃ©porter dans le module de visibilitÃ©
// 							if (typeof (window.mozInnerScreenX) != "undefined") { // firefox
// 								mmmlog(window);
// 								window.setTimeout (function (){
// 									
// 									//if (window.mozInnerScreenX)
// 								}, 100);
// 							}
						}
						else { // soit ad_is_in_iframe == 0 soit ( ad_in_friendly_iframe == 1 et ad_is_in_iframe == 1)
							var maximizeStatId = isExpand ? 200+paramsCrea.optimVisibilite : 100+paramsCrea.optimVisibilite;
							if (MMM_Visibilite.verifierVisibilite(format_p.support)) {
								mmmlog("D.eventCrea -> au demarrage (de l'expand ? "+isExpand+" ) je suis visible");
								format_p.interagir ("mmm_start");
								this.sendStatEvent ("maximise", maximizeStatId);
							}
							else {
								format_p.addEventListener("format_visible", function (){
									mmmlog("D.event("+format_p.name+" -> format_visible) -> mmm_start");
									format_p.interagir("mmm_start");
									this.sendStatEvent("maximise", maximizeStatId);
								}, false, false); // deuxiÃ¨me false --> pas persistent
							}
						}
					}
					break;
				case "format.start" :
					format_p.etatCrea = "start";
					if(isExpand) {
						formats.f_main.dispatchEvent ("annuler_demande_expand");
					}
					else {
						if (format_p.crea.hideExpandButtonAtEnd) {
							f_main.interagir("mmm_show_hide_ui",["Expand"],true);
						}
					}
					break;
				case "format.end" :
					format_p.etatCrea = "end";
					if (isExpand) {
						if (f_expand.crea.collapseAtEnd) {
							this.fermerExpand ();
							this.sendStatEvent ("minimise", 1);
						}
					}
					else {
						f_main.interagir("mmm_show_hide_ui",["Replay"],true);
						if (format_p.crea.hideExpandButtonAtEnd) {
							f_main.interagir("mmm_show_hide_ui",["Expand"],false);
						}
					}
					break;
				// envoie Ã  tous sans s'assurer que tous les flashs on Ã©tÃ© crÃ©Ã©
				case "dispositif.multicast" :
				case "dispositif.inform" :
				
					//"parcour" d'une liste de chose qui compose le dispostif === n flash
					//en prenant soin d'intifiÃ© l'appelant via le scopeJS ?
					//--> appel Ã  tous les autres flash de la fonction "mmm_inform"
					// eg : 	ExternalInterface.addCallback('mmm_inform', inform); --> private function inform(sender:String,data:Object)
				
					/*for(j=0;j<arguments.length;j++){
						aArgs.push(arguments[j]);
					}*/
					//aArgs.shift();
					for(var i in formats){
						var format = formats[i];
						
						if(format!==format_p){
							if (format.etatCrea != "") {
									format.interagir (data.callbackName, format_p.creaDOMObject.id, data.callbackParams);
							}
							else {
								if (type == "inform"){
									format.addEventListener ("ready", function(){
										format.interagir (data.callbackName, format_p.creaDOMObject.id, data.callbackParams);
									});
								}
							}
						}
					}
					break;
				case "format.share" :
					if( (data.url != null || data.title != null) && (data.value =='twitter' || data.value =='facebook' || data.value =='googleplus' || data.value == 'google') ){
						var clickTags = this.params.adserving.clickTags;
						mmmlog("format.share : ");
						mmmlog(data);
					
						switch( data.value ){
							case 'twitter':
								clickTag_StatId = 41;
								if( this.params.adserving.socialGridPriority == 1 && typeof(clickTags[data.value]) == 'object'){
									clickTag_url=clickTags[data.value].url;
								}else{
									clickTag_url= this.params.adserving.clickBase + encodeURIComponent('http://www.twitter.com/home?status='+encodeURIComponent(data.title+' '+data.url));
								}

								break;
							case 'facebook':
								clickTag_StatId = 42;
								var datapart = new Array();

								if( data.url != null){
									datapart.push('u='+encodeURIComponent(data.url));
								}
								if( data.title != null){
									datapart.push('t='+encodeURIComponent(data.title));
								}								
								if( this.params.adserving.socialGridPriority == 1 && typeof(clickTags[data.value]) == 'object'){
									clickTag_url=clickTags[data.value].url;
								}else{
									clickTag_url= this.params.adserving.clickBase + encodeURIComponent('http://www.facebook.com/sharer/sharer.php?'+datapart.join('&'));
								}
								break;
							case 'googleplus':
							case 'google':
								clickTag_StatId = 43;
								var datapart = new Array();
								if( data.url != null){
									datapart.push('url='+encodeURIComponent(data.url));
								}
								if( data.title != null){
									datapart.push('title='+encodeURIComponent(data.title));
								}
								if( this.params.adserving.socialGridPriority == 1 && typeof(clickTags[data.value]) == 'object'){
									clickTag_url=clickTags[data.value].url;
								}else{
									clickTag_url= this.params.adserving.clickBase + encodeURIComponent('http://plus.google.com/share?'+datapart.join('&'));
								}
								break;
						}
						
						this.sendStatEvent("click", clickTag_StatId);
						format_p.interagir("mmm_pause");
						window.open(clickTag_url);
						
				//		mmmlog(	"exit click : "+clickTag_StatId+", "+clickTag_url);
						
						break;
					}
					mmmlog("format.share AS click >>> ");
					
				case "format.exit_click" :
					var clickTags = this.params.adserving.clickTags;
					var clickTag = 'clickTag0';
					var clickBackup = false;
					
					if( data && typeof (data.value) == "string" ){
						if (data.value.indexOf("http")==0) {
							var found =false;
							for(var i in clickTags){
								var clearURL = decodeURIComponent( clickTags[i].url.substring( this.params.adserving.clickBase.length ) );
								if (data.value == clearURL) {
									mmmlog("custom clicktag ("+data.value+") == "+clearURL);
									clickTag = i;
									found = true;
									break;
								}else{
									mmmlog("custom clicktag ("+data.value+") <> "+clearURL);
								}
							}
							if( !found &&  this.params.adserving.clickTagGridPriority == 0 ){
								clickTags['__custom'] = {};
								clickTags['__custom'].url = this.params.adserving.clickBase + encodeURIComponent(data.value);
								clickTags['__custom'].statId = 1;
								clickTags['__custom'].pixel = clickTags['clickTag0'].pixel;
								clickTag = '__custom';
							}
						}
						else {
							if( typeof(clickTags[data.value]) == 'object'){
								clickTag = data.value;
							}
						}
					}
					else{
						var idClick = 0;
						if (data){
							idClick = parseInt(data.value);
						}
						if( idClick < 0 ){
							clickBackup = true;
						}else{	
							var testClicktag = 'clickTag'+ idClick;
							if( typeof(clickTags[testClicktag]) == 'object' ){
								clickTag = testClicktag;
							}
						}
					}
					var clickTag_url = clickTags[clickTag].url;
					var clickTag_StatId = clickBackup ? 8 : clickTags[clickTag].statId;
					var clickTag_Pixel = clickTags[clickTag].pixel;
					if( clickTag_StatId == 1 && isExpand){
						clickTag_StatId = 2;
					}
			
				//	mmmlog(	"exit click : "+clickTag_StatId+", "+clickTag_url);
					this.sendStatEvent("click", clickTag_StatId);
					this.sendStatCustom(clickTag_Pixel);
					if (paramsCrea.pauseOnClick)
						format_p.interagir("mmm_pause");
					window.open(clickTag_url);
					
					break;
				case "format.tracking_pixel" :
					this.sendStatRaw(data.value);
					break;
				default :
				//	mmmlog("type de stats non gÃ©rÃ© " + type);
			}
		};

		// implÃ©mentation des stats ici pour gagner en simplicitÃ©
		//////////////////////////////////////////////////////////////////////////////////
		// sendStatEvent 
		//
		Dispositif_ExpandOptimiseVisibilite.prototype.sendStatEvent = function(famille,id){
			if (location.href.indexOf ("massmotionmedia.com") != -1 && typeof (logTracking) !== 'undefined') {
				logTracking ("evt "+famille+" "+id);
			}
			
			var url = Math.ceil(Math.random()*1000000)+'&tracker=Send_EVT_RC;'+id+';'+famille+';0';
			this.sendStatRaw(this.trackingUrl+url);
		};

		//////////////////////////////////////////////////////////////////////////////////
		// sendStatInit 
		//
		Dispositif_ExpandOptimiseVisibilite.prototype.sendStatInit = function(famille,id){
			
			if (location.href.indexOf ("massmotionmedia.com") != -1 && typeof (logTracking) !== 'undefined' ) {
				logTracking ("init "+id);
			}
			
			var url = Math.ceil(Math.random()*1000000)+'&tracker=INIT;'+id+';'+famille+';0';
			this.sendStatRaw(this.trackingUrl+url);
		};
		

		//////////////////////////////////////////////////////////////////////////////////
		// sendStatCustom
		//
		Dispositif_ExpandOptimiseVisibilite.prototype.sendStatCustom = function(url){
			this.sendStatRaw(this.trackingUrl+url);
		};

		//////////////////////////////////////////////////////////////////////////////////
		// sendStatRaw 
		//
		Dispositif_ExpandOptimiseVisibilite.prototype.sendStatRaw = function(url){
			if(url != ''){
				var imgstat = new Image();
				imgstat.src = url;
				mmmlog('-STAT- '+url);
			}
		};

		// pur js pour Ã©viter la redÃ©finition de la classe
		Dispositif_ExpandOptimiseVisibilite._initialized = true;
	}
	
	// constructeur Ã  la mode js ci-dessous
	this.params = params;
	this.name = publicName;
	this.formats = {};
	this.trackingUrl = params.adserving.baseTracking;
	this.utils = MMM_Utilitaires;
	this.installationEnCours = false;
	this.expandAutorise=true;
	this.testDebitRequis = false;
	this.testCiblef_mainRequis = false;
	this.testCibleExpandRequis = false;
	this.temporiserExpand = false;
	this.debitPret=true;
	this.ciblef_mainPret=true;
	
	this.cibleExpandPret=true;
	
	this.attendreChargementWindow=false;
	this.autoFermetureExpand=0;
	this.constructeur();
};

function Format_OptimiseVisibilite(params,scope,name,parent){

	// pour implÃ©mentation de la pseudo-interface de EventDispatcher
	this.e={};

	if( typeof(Format_OptimiseVisibilite._initialized) == "undefined"){
		// pour implÃ©mentation de la pseudo-interface de EventDispatcher
		Format_OptimiseVisibilite.prototype.addEventListener			= mmm_ed_addEventListener;
		Format_OptimiseVisibilite.prototype.removeEventListener		= mmm_ed_removeEventListener;
		Format_OptimiseVisibilite.prototype.dispatchEvent				= mmm_ed_dispatchEvent;
		Format_OptimiseVisibilite.prototype.removeAllEventListener	= mmm_ed_removeAllEventListener;
	
		//////////////////////////////////////////////////////////////////////////////////
		// installer : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.installer = function(etat){
			if( etat == this.etatCourant){
				mmmlog("Format_OptimiseVisibilite.installer("+etat+") --> etat identique => false");
				return true;
			}
			if (!this.params.etats[etat]) {
				mmmlog("Format_OptimiseVisibilite.installer("+etat+") --> etat indÃ©fini => false");
				return false;
			}
			if( this.params.etats[etat].crea.type != "none" && typeof(	this['installer_crea_'+this.params.etats[etat].crea.type] ) != 'function' ){
				mmmlog(this.params.etats[etat].crea.type+' non gÃ©rÃ©');
				return false;
			}
			if(this.cibleDOM == null){
				mmmlog("Format_OptimiseVisibilite.installer("+etat+") --> cible indÃ©fini => false");
				return false;
			}
			this.etatCourant = etat;
			this.crea = this.params.etats[etat].crea;
			switch (etat) {
				case "COLLAPSED" :
				case "EXPANDED" :
					if (/msie 6/i.test(navigator.userAgent)) { // is IE 6
						mmmlog("Format_OptimiseVisibilite.installer("+etat+") --> ie6 => false");
						return false;
					}
					this.qualiteVideo = 'bq';
					
					if( typeof( this.params.etats[etat].eligibilite ) == 'object' ){
						var eligibilite = this.params.etats[etat].eligibilite;
						if (typeof (eligibilite.debit) == "number" && this.parent.utils.debit < eligibilite.debit && eligibilite.debit != 0) {
							mmmlog("Format_OptimiseVisibilite.installer("+etat+") --> eligibilite KO => false ("+typeof (eligibilite.debit)+" , "+ this.parent.utils.debit +" , "+ eligibilite.debit +")");
							return false;
						}
						if( (this.params.etats[etat].crea.type == 'flash') && (this.parent.utils.flashVersion < eligibilite.flashVersion) ){
							mmmlog("Format_OptimiseVisibilite.installer("+etat+") --> flash => false");
							return false;
						}
						this.qualiteVideo = (typeof (eligibilite.debit_mq) == "number" && this.parent.utils.debit > eligibilite.debit_mq) ? "mq" : "bq";
					}
					if (!this.support) {
						this.creerDivSupport (this.crea);
					}
					if( typeof(this.crea.optimVisibilite) != "undefined" && ( this.crea.optimVisibilite == 1 || this.crea.optimVisibilite == 2 ) ){
						var self = this, referentVisibilite = this.support;
						MMM_Visibilite.ajouterElement(this.support, function(){
							mmmlog(self.name+" devient visible");
							self.dispatchEvent("format_visible");
						}, function(){
							mmmlog(self.name+" devient invisible");
							self.dispatchEvent("format_invisible");
						});
					}
					
					if( this.params.etats[etat].crea.type == "none"){
						return true;
					}
					
					this['installer_crea_'+this.crea.type]();
					if( typeof(this.crea.countdownDelayToExpand) !== "undefined"){
						this.compteurCrea = new CompteurCrea (this, this.crea.countdownDelayToExpand );
					}else{
						this.compteurCrea = null;
					}
					var callbackInit = this.params.etats[etat].callbackInit;
					if (callbackInit) {
						this.params.etats[etat].callbackInit.apply(this, null);
					}
					return true; break;
					
				case "BACKUP" :
					this.creerDivSupport (this.crea);
					this['installer_crea_'+this.crea.type]();
					// patch temporaire le temps de concevoir le concept de plugin d'interstitiel
					var callbackInit = this.params.etats[etat].callbackInit;
					if (callbackInit) {
						this.params.etats[etat].callbackInit.apply(this, null);
					}
					return true; break;
			}

			return false;			
		};
		
		//////////////////////////////////////////////////////////////////////////////////
		// desinstaller : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.desinstaller = function(jouer_fin){
			this.support.parentNode.removeChild (this.support);
			mmmlog("Format_OptimiseVisibilite.desinstaller("+jouer_fin+")");
		};

		//////////////////////////////////////////////////////////////////////////////////
		// interagir : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.interagir = function(){
			var f_name  = arguments[0],
				f_params = [].splice.call(arguments,1, arguments.length - 1); // pour IE, splice a besoin d'un second paramÃ¨tre obligatoire qui sera le nombre de valeurs Ã  rÃ©cupÃ©rer max : ["1","2"].splice (1, nbValeursARecuperer)
			try {
				if(f_params.length==0){
					return this.creaDOMObject [f_name]();
				}
				else{
					return this.creaDOMObject [f_name].apply(this.creaDOMObject,f_params );
				}
			}
			catch (e) {
				mmmlog("invalid function call " + f_name + " or error (missing argument ?) : " + e);
			}
			return null;
		};

		//////////////////////////////////////////////////////////////////////////////////
		// changerEtat : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.changerEtat = function(etat){
			if(this.etatCourant == etat){
				mmmlog("Format_OptimiseVisibilite.changerEtat("+etat+") ==> inutile" );
				return false;
			}
			if(!this.creaDOMObject){
				this.installer(etat);
			}
			switch (etat) {
				case "COLLAPSED":
					break;
				case "EXPANDED":
					if(typeof(this.params.expandMaxPerSession) != "undefined"){
						if (this.nbExpand >= this.params.expandMaxPerSession)
							return false;
						this.nbExpand++;
						break;
					}
			}
			this.etatCourant = etat;
			this.crea = this.params.etats[etat].crea;
			this.modifierApparence();

			var callbackEtat = this.params.etats[etat].callbackEtat;
			if (callbackEtat) {
				callbackEtat.apply(this, null);
			}
			return true;
		};

		//////////////////////////////////////////////////////////////////////////////////
		// modifierApparence : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.modifierApparence = function(){
			mmmlog("Format_OptimiseVisibilite.modifierApparence("+this.crea.style.width+", "+this.crea.style.height+")");
			// modif div support
			this.support.style.cssText ="";
			var cssText = "", style = this.crea.style;
			for (var cssType in style) {
				if (cssType=="text") {
					this.support.style.cssText += ";"+style[cssType];
				}
				else {
					if (typeof (this.support.style [cssType]) != "undefined")
						this.support.style [cssType] = style[cssType];
				}
			}
			if (this.etatCourant=="EXPANDED") {
			    if (this.params.synchronisation && this.parent.formats[this.params.synchronisation] && this.parent.formats[this.params.synchronisation].support) {
			        var displayElem = this.parent.formats[this.params.synchronisation].support;
					if (displayElem) {
						var align = this.params.align;
						var defaultLeft = 0;
						var defaultTop = 0;
						if (align) {
							if (align.indexOf("r")!=-1) {
								defaultLeft = displayElem.offsetWidth-this.support.offsetWidth;
							}
							if (align.indexOf("b")!=-1) {
								defaultTop = displayElem.offsetHeight-this.support.offsetHeight;
							}
						}
						if (!this.replacerSurTargetFonction) {
							var _this = this;
							this.replacerSurTargetFonction = function () {
								var posDisplayElem = MMM_Utilitaires.trouverPositionElementDOM (displayElem);
								_this.support.style.left = (defaultLeft + posDisplayElem[0])+"px";
								_this.support.style.top  = (defaultTop  + posDisplayElem[1])+"px";
							}
						}
						if (!this.replacerSurTargetEvent) {
							var _this = this;
							this.replacerSurTargetEvent = setTimeout(function(){
								_this.replacerSurTargetFonction();
							}, 50);
						}
						this.replacerSurTargetFonction();
					}
			    }
			    var _this = this;
			}
			else {
				if (this.replacerSurTargetEvent) {
					clearTimeout (this.replacerSurTargetEvent);
					this.replacerSurTargetEvent = null;
				}
			}
		};

		//////////////////////////////////////////////////////////////////////////////////
		// creerDivSupport : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.creerDivSupport = function () {
			this.support = document.createElement("DIV");
			this.support.id = "mmm_support_" + this.parent.params.adserving.c_id + "_" + this.random;
			var cssText = "", style = this.crea.style;
			for (var cssType in style) {
				if (cssType=="text") {
					this.support.style.cssText += ";"+style[cssType];
				}
				else {
					if (typeof (this.support.style [cssType]) != "undefined")
						this.support.style [cssType] = style[cssType];
				}
			}
			if (this.params.ratioContainer) {
				this.ratioContainer = document.createElement("DIV");
				this.ratioContainer.style.position = "relative";
				this.support.appendChild(this.ratioContainer);
			}
			this.cibleDOM.appendChild(this.support);
			mmmlog("F.creerDivSupport("+this.name+") --> "+this.support.style.cssText);
		};

		//////////////////////////////////////////////////////////////////////////////////
		// gererAspectRatio  : expand compatible?
		//		
		Format_OptimiseVisibilite.prototype.gererAspectRatio = function () {
			mmmlog("gererAspectRatio");
			var vRatio = 16 / 9;
			var w_video = 0;
			var h_video = 0;

			var wsize = MMM_Utilitaires.getWindowSize();
			var window_width = wsize[0];// hack pour pc clÃ©ment (flash player 14 ?) ? wut
			var window_height = wsize[1];
		
			if (window_width < window_height) {
				w_video = window_height * vRatio;
				h_video = window_height;
			} else {
				if ((window_width / window_height) > vRatio) {
					h_video = window_width / vRatio;
					w_video = window_width;
				} else {
					w_video = window_height * vRatio;
					h_video = window_height;
				}
			}

			w_video = parseInt(w_video);
			h_video = parseInt(h_video);
			var left = parseInt((window_width - w_video) / 2);
			var top = parseInt((window_height - h_video) / 2);

			mmmlog(" top: " + top + " left: " + left + " w_video: " + w_video + " h_video: " + h_video + " window_width: " + window_width + " window_height: " + window_height);
			
			var flash = this.creaDOMObject;
			var container = this.ratioContainer;
			/*container.style.top = top + "px";
			container.style.left = left + "px";
			flash.width = w_video;
			flash.height = h_video;
			flash.style.width = w_video + "px";
			flash.style.height = h_video + "px";*/
			container.style.width = "100%";
			container.style.height = "100%";
			flash.width = "100%";
			flash.height = "100%";
			flash.style.width = "100%";
			flash.style.height = "100%";
			if (flash.mmm_updateSize) {
				mmmlog("mmm_updateSize !");
				flash.mmm_updateSize(window_width, window_height, w_video, h_video, -top, -left);
			}
			else {
				mmmlog("Format_OptimiseVisibilite.gererAspectRatio :  mmm_updateSize cancelled");
			}
		}
		//////////////////////////////////////////////////////////////////////////////////
		// installer_crea_general : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.installer_crea_general = function(){
			var self=this;
			this.parent.utils.element_addListener(this.creaDOMObject, "click", function(){ self.onClickCrea(); });
			if (this.crea.soundOnRollOver || this.crea.expandOnRollOver || this.crea.collapseOnRollout) {
				this.parent.utils.element_addListener(this.creaDOMObject, "mouseover", function(){ self.onRollCrea("over") });
				this.parent.utils.element_addListener(this.creaDOMObject, "mouseout", function(){ self.onRollCrea("out") });
			}
		};
		
		//////////////////////////////////////////////////////////////////////////////////
		// installer_crea_img : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.installer_crea_img = function(){
			var img = document.createElement('img');
			img.src=this.crea.asset;
			this.creaDOMObject=img;
			this.support.appendChild(img);
			this.installer_crea_general ();
		};
		
		//////////////////////////////////////////////////////////////////////////////////
		// installer_crea_flash : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.installer_crea_flash = function(){
			var paramsFlash = this.crea.paramsFlash, stringParamsFlash = "", flashVars = null, adserving = this.parent.params.adserving;
			paramsFlash.movie = this.crea.asset;
			paramsFlash.flashVars = this.crea.flashVars;
			paramsFlash.flashVars += "&videoFile=" + MMM_Utilitaires.MAJurlVideoSelonDebit(this.crea["video_"+this.qualiteVideo]);
			paramsFlash.flashVars += "&bandwidth=" + MMM_Utilitaires.debit;
			
			paramsFlash.flashVars += "&jsobject="+this.publicName;
			this.creaDOMObject = this.parent.utils.createFlashElement(this.name + "_mmm_" + this.random, paramsFlash, this.crea.styleFlash);
			if (this.params.ratioContainer) {
				this.ratioContainer.appendChild(this.creaDOMObject);
			}
			else {
				this.support.appendChild(this.creaDOMObject);
			}
			this.installer_crea_general ();
		};
		
		//////////////////////////////////////////////////////////////////////////////////
		// installer_crea_html5 : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.installer_crea_html5 = function(){
			var paramsHtml5Format = this.crea.html5Vars;
			paramsHtml5Format.paramsVideo = this.crea.video;
			paramsHtml5Format.paramsVideo.videoFile = MMM_Utilitaires.MAJurlVideoSelonDebit(this.crea["video_"+this.qualiteVideo]);
			paramsHtml5Format.movie = this.crea.asset;
			paramsHtml5Format.jsobject = this;
			// iframe
			this.creaDOMObject = this.parent.utils.createHtml5Element(this.name+"_mmm_"+this.random, paramsHtml5Format);
			if (true) {
				var iframe = document.createElement ("iframe");
				iframe.style.width = this.crea.style.width;
				iframe.style.height = this.crea.style.height;
				iframe.style.border = "none";
				var self = this;
				iframe.onload=function(){
					var body = this.contentDocument.body;
					body.style.cssText = "width:"+self.crea.style.width+";height:"+self.crea.style.height+";margin:0;padding:0;overflow:hidden;";
					body.appendChild (self.creaDOMObject);
				};
				this.support.appendChild(iframe);
			}
			this.installer_crea_general ();
		};
		
		//////////////////////////////////////////////////////////////////////////////////
		// onClickCrea : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.onClickCrea = function(){
			switch(this.etatCourant){
				case 'COLLAPSED':
				case 'EXPANDED':
					break;
				case 'BACKUP':
					this.dispatchEvent ("creaEvent", {scope:"format", type:"exit_click", data:{value:-1}});
					break;
			}
		};
		
		//////////////////////////////////////////////////////////////////////////////////
		// onRollCrea : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.onRollCrea = function(sens){
			mmmlog("Format_OptimiseVisibilite.prototype.onRollCrea("+sens+")");
			
			switch(this.etatCourant){
				case 'COLLAPSED':
					if (this.crea.soundOnRollOver) {
						if (sens=="over") {
							if (this.etatCrea != "") {
								if (this.interagir ("mmm_soundOn")) {
									this.dispatchEvent ("creaEvent", {scope:"rollover", type:"sound_on", data:null});
								}
							}
							else {
								this.crea.soundOnStart = true;
							}
						}
						else if (sens == "out") {
							if (this.etatCrea != "") {
								if (this.interagir ("mmm_soundOff")) {
									this.dispatchEvent ("creaEvent", {scope:"rollover", type:"sound_off", data:null});
								}
							}
							else {
								this.crea.soundOnStart = false;
							}
						}
					}
					if( this.crea.expandOnRollOver ){
						var scope;
						if (sens == "over") {
							if (typeof (this.crea.expandOnRollOverInfinite) != "undefined" && !this.crea.expandOnRollOverInfinite){
								this.crea.expandOnRollOver = false;
								return;
							}
							scope="rollover";
							
						}
						else {
							scope="rollout";
						}
						this.dispatchEvent ("creaEvent", {scope:scope, type:"collapse", data:null});
					}
					break;
				case 'EXPANDED':
					var scope;
					if (this.crea.collapseOnRollout &&  sens == "out" ){
						this.dispatchEvent ("creaEvent", {scope:"rollout", type:"expand", data:null});
						// this.dispatchEvent("fermer_expand");
					}
					if (this.crea.soundOnRollOver) {
						if (sens=="over") {
							if (this.etatCrea != "") {
								if (this.interagir ("mmm_soundOn")) {
									this.dispatchEvent ("creaEvent", {scope:"rollover", type:"sound_on", data:null});
								}
							}
							else {
								
							}
						}
						else if (sens == "out") {
							if (this.interagir ("mmm_soundOff")) {
								this.dispatchEvent ("creaEvent", {scope:"rollover", type:"sound_off", data:null});
							}
						}
					}
					if (sens=="over") {
						scope="rollover";
					}
					else {
						scope="rollout";
					}
					this.dispatchEvent ("creaEvent", {scope:scope, type:"expand", data:null});
					break;
				case 'BACKUP':
					break;
			}
		};
		
		//////////////////////////////////////////////////////////////////////////////////
		// creaEvent : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.creaEvent = function(scope, type, data){
			this.dispatchEvent("creaEvent", {scope:scope, type:type, data:data});
		};
		
		//////////////////////////////////////////////////////////////////////////////////
		// customEvent : expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.customEvent = function(type, data){
			mmmlog("Format_OptimiseVisibilite.prototype.customEvent");
			mmmlog("type : " + type + " data : ");
			mmmlog(data);
		};
		
		//////////////////////////////////////////////////////////////////////////////////
		// constructeur : gestion du "divTarget" expand + inpage compatible
		//
		Format_OptimiseVisibilite.prototype.constructeur = function(){
			if(!this.params.targetID || this.params.targetID=="") {
				if (document.readyState == "complete") {
					mmmlog ("ERROR undefined target and can't use document.write if document is already loading");
					return false;
				}
				var support = this.params.etats.COLLAPSED.crea,
					id = "mmm_crea_"+this.random; // dynamisation sÃ©curisÃ©e du nom
				document.write ('<div id="'+id+'" style="position:relative;width:'+support.style.width+';height:'+support.style.height+';"></div>');
// 				this.cibleDOM = document.getElementById (id);
			}else if(this.params.targetID=="body") { // typiquement pour des expand
				this.cibleDOM = document.body;
			}
		};
		
		Format_OptimiseVisibilite._initialized = true;
	}

	this.params = params;
	this.name = name;
	this.publicName = scope+"."+name;
	this.cibleDOM = null;
	this.etatCrea = "";
	this.etatCourant = "";
	this.parent = parent;
	this.support = null;
	this.nbExpand = 0;
	this.random=Math.ceil(Math.random()*99000000);
	this.attenteAvantOuverture=0;
	this.compteurCrea = null;

	//constructeur Ã  la mode js ci-dessous
	this.constructeur();
}
// duree = entier optionnel
var CompteurCrea = function (objetCrea, duree){
	this.duree = (parseInt(duree) <0 ||  parseInt(duree) > 15 ) ? 5 : parseInt(duree);
	this.crea = objetCrea;
	this.countdownEnCours = false;
	
	if (!this.crea || !this.crea.interagir) {
		mmmlog ("ERROR creation compteurCrea");
		return;
	}
	
	if( typeof(CompteurCrea._initialized) == "undefined"){
		CompteurCrea._initialized=true;
		CompteurCrea.prototype.start = function (){
			this.countdownEnCours = true;
			this.crea.interagir ("mmm_start_countdown", this.duree);
		}
		CompteurCrea.prototype.stop = function (){
			if (this.countdownEnCours) {
				this.countdownEnCours = false;
				this.crea.interagir ("mmm_stop_countdown");
			}
		}
		CompteurCrea.prototype.majCountdown = function (etatCountDown) {
			if (typeof (etatCountDown) == "undefined") {
				etatCountDown = !this.countdownEnCours;
			}
			this.countdownEnCours = etatCountDown;
		}
	}
}

if (!MMM_Utilitaires) {
	var MMM_Utilitaires = {
		e:{},
		// pour implÃ©mentation de la pseudo-interface de EventDispatcher
		addEventListener		: mmm_ed_addEventListener,
		removeEventListener		: mmm_ed_removeEventListener,
		dispatchEvent			: mmm_ed_dispatchEvent,
		removeAllEventListener	: mmm_ed_removeAllEventListener,
		
		testDebitEnCours		: false,
		testDebit : function(urlPing,urlDebit){
			mmmlog("fonction testDebit ");
			if (!this.testDebitEnCours) {
				this.testDebitEnCours = true;
				var t0 = (new Date()).getTime();
				this.support_latence = new Image(), this.support_debit = new Image();
				this.support_latence.src = urlPing+'?rnd='+t0; //'./ping.gif?rnd='+t0;
				var self = this;
				this.support_latence.onload = function(){
					var t1 = (new Date()).getTime();
					self.latence = Math.max(0,t1 - t0);
					self.support_debit.src = urlDebit+'?rnd='+t1; //'./debit_jpg_2.jpg?rnd='+t1;
					self.element_addListener (self.support_debit, "load", function(){
						var t2 = (new Date()).getTime();
						var timeElapsed = (t2 - t1);
						timeElapsed = (timeElapsed > self.latence) ? (timeElapsed-self.latence)/1000 : timeElapsed/1000;
						self.debit = Math.ceil(34055*8/(1024*timeElapsed)); // 34055 est le poids de l'image, Ã  adapter si changement de urlDebit
						mmmlog("dispatchEvent debit_fini "+self.debit);
						self.dispatchEvent("debit_fini");
					});
				}
			}
		},
		// dÃ©finition du buffersize si celui ci inconnu (XXXX)
		MAJurlVideoSelonDebit : function(urlVideo){
			
			mmmlog("urlVideo : "+urlVideo + " debit : "+this.debit);
			if( urlVideo.indexOf('buffersize=XXXX') == -1 ){
				return urlVideo;
			}
			var buffersize = 99999;
			var debit2buffersize = {
				0:15000,
				256:11000,
				512:8000,
				768:6000,
				1024:5000,
				1500:4000,
				2500:3000,
				3000:2000
			};
			var debit2buffersizeArray = new Array();
			for (var debitTest in debit2buffersize) {
				debit2buffersizeArray.push(debitTest);
			}
			debit2buffersizeArray = debit2buffersizeArray.sort(function(a,b){return b - a}); // range du plus grand debit au plus petit
			for( var i=0; i < debit2buffersizeArray.length; i++){
				if( debit2buffersizeArray[i] <= this.debit){
					mmmlog("OK buffersize/debit : "+i+", dreel="+this.debit+", dtest="+debit2buffersizeArray[i]+", buff="+debit2buffersize[debit2buffersizeArray[i]]);
					buffersize = debit2buffersize[debit2buffersizeArray[i]];
					break;
				}
				mmmlog("KO buffersize/debit : "+i+", "+debit2buffersizeArray[i]+", "+debit2buffersize[debit2buffersizeArray[i]]);
			}
			if (buffersize==99999) {
				buffersize = 4000;
			}
			return urlVideo.replace('buffersize=XXXX','buffersize='+buffersize);
		},
		
		createFlashElement : function(name, paramsFlash, style) {
			var ua = navigator.userAgent.toLowerCase();
			if (!/msie/.test (ua)) {
				var flashObject = document.createElement ("embed");
				if (/webkit/.test(ua)) {
					if (paramsFlash["scale"]) { // est obligatoire sous chrome mais pose problÃ¨me pour Firefox...
						flashObject.setAttribute("scale", paramsFlash["scale"]);
					}
				}
				for (var param in paramsFlash) {
					if (param != "scale" || !/webkit/.test (ua)) {
		//				var paramDOM = document.createElement("param");
						mmmlog (param + " " + paramsFlash[param]);
						flashObject.setAttribute(param, paramsFlash[param]);
		//				flashObject.appendChild(paramDOM);
					}
				}
				flashObject.setAttribute("src", paramsFlash.movie);
			}
			else {
				var flashObject = document.createElement ("object");
	/* 			if (paramsFlash["wmode"]) {
					var paramDOM = document.createElement("param");
					paramDOM.setAttribute("name", "wmode");
					paramDOM.setAttribute("value", paramsFlash["wmode"]);
					flashObject.appendChild(paramDOM);
				}
				if (paramsFlash["scale"]) {
					var paramDOM = document.createElement("param");
					paramDOM.setAttribute("name", "scale");
					paramDOM.setAttribute("value", paramsFlash["scale"]);
					flashObject.appendChild(paramDOM);
				}*/
				for (var param in paramsFlash) {
						var paramDOM = document.createElement("param");
						paramDOM.setAttribute("name", param);
						paramDOM.setAttribute("value", paramsFlash[param]);
						flashObject.appendChild(paramDOM);
				}
				flashObject.setAttribute("classid", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000");
			}
			flashObject.id = name;
			flashObject.name = name;// ATTENTION Jon il me faudrait aussi un name l'embed >> pas de pb sous ie ?
			//flashObject.name = name;
			//flashObject.setAttribute("data", paramsFlash.movie); // attention sous IE data ne marche pas si c'est un object (peut Ãªtre pas dans tous les cas donc ne pas dÃ©commenter parce que Ã§a marche dans un cas)
			flashObject.setAttribute("type", "application/x-shockwave-flash");
			var cssText = "outline:0;";
			if (style) {
				for (var i in style) {
					if (i=="width" ||i=="height")
						flashObject[i]=style[i];
					else
						cssText += i+":"+style[i]+";";
				}
				if (cssText.indexOf ("width") == -1) {
					cssText += "width:100%;";
				}
				if (cssText.indexOf ("height") == -1) {
					cssText += "height:100%;";
				}
				cssText += style;
			}
			else {
				cssText += "width:100%;height:100%;";
			}
			flashObject.style.cssText = cssText;
			
			return flashObject;
		},
		createHtml5Element : function(name, paramsHtml5Format, style) {
			var format = document.createElement ("div");
			paramsHtml5Format.domFormat = format;
			format.id = name;
			if (typeof (MMM_Format) == "undefined") {
				var script=document.createElement("script");
				script.src=paramsHtml5Format.movie;
				this.element_addListener(script, "load", function() {
					try {
						MMM_Format.ajouterFormat (paramsHtml5Format);
					}
					catch (e) {
						mmmlog(e)
						mmmlog("erreur a la creation du player html5");
					}
				});
				document.body.appendChild(script);
			}
			else {
				MMM_Format.ajouterFormat (paramsHtml5Format);
			}
			var cssText = "";
			if (style) {
				if (style.indexOf ("width") == -1) {
					cssText += "width:100%;";
				}
				if (style.indexOf ("height") == -1) {
					cssText += "height:100%;";
				}
				cssText += style;
			}
			else {
				cssText += "width:100%;height:100%;";
			}
			format.style.cssText = cssText;
			document.body.appendChild (script);
			return format;
		},
		
		element_addListener : function(target,type,f,u){
			if (target.addEventListener) {
				target.addEventListener(type,f,u);
			}
			else if (target.attachEvent) {
				target.attachEvent("on"+type,f);
			}
		},
		element_removeListener : function(target,type,f,u){
			if (target.removeEventListener) {
				target.removeEventListener(type,f,u);
			}
			else if (target.detachEvent) {
				target.detachEvent("on"+type,f);
			}
		},
		
		trouverIndexElement : function (tableau, valeur, cle) {
			var iterator = 0;
			while (tableau[iterator]) {
				if (cle) {
					if (tableau[iterator][cle]===valeur) {
						return iterator;
					}
				}
				else {
					if (tableau[iterator]===valeur) {
						return iterator;
					}
				}
				iterator++;
			}
			return -1;
		},
		trouverPositionElementDOM : function (elementDOM) {
			 var curX = elementDOM.offsetLeft, curY = elementDOM.offsetTop;
			if (elementDOM.offsetParent) {
				var parent = elementDOM.offsetParent;
				do {
					curX += parent.offsetLeft;
					curY += parent.offsetTop;
				}
				while (parent = parent.offsetParent);
			}
			return [curX,curY];
		},
		tabSynchroPosition : [],		
		synchroniserPosition : function (elementDOMASynchroniser, elementDOMDeSynchronisation, offsetX, offsetY) {
			if (this.trouverIndexElement (this.tabSynchroPosition, elementDOMASynchroniser, "DOMASynchroniser") == -1) {
				this.tabSynchroPosition.push ({DOMASynchroniser:elementDOMASynchroniser, DOMDeSynchronisation:elementDOMDeSynchronisation, offsetX:offsetX, offsetY:offsetY});
				elementDOMASynchroniser.style.position = "absolute";
				var self = this;
				this.ListenerWindow = function () {
					self.mettreAjourSynchronisation ();
				}
				this.mettreAjourSynchronisation ();
				MMM_Utilitaires.element_addListener(window, "scroll", this.ListenerWindow);
				MMM_Utilitaires.element_addListener(window, "resize", this.ListenerWindow);

			}
			return false;
		},		
		mettreAjourSynchronisation : function () {
			try {
				for (var i = 0; i < this.tabSynchroPosition.length; i++) {
					mmmlog(this.tabSynchroPosition [i]);
					var element = this.tabSynchroPosition [i];
						DOMASynchroniser = element.DOMASynchroniser,
						DOMDeSynchronisation = element.DOMDeSynchronisation;
						positionDOMDeSynchronisation = this.trouverPositionElementDOM (DOMDeSynchronisation);

					DOMASynchroniser.style.left = positionDOMDeSynchronisation[0] + element.offsetX + "px";
					DOMASynchroniser.style.top  = positionDOMDeSynchronisation[1] + element.offsetY + "px";
				}
			}
			catch(e){
				mmmlog ("mettreAjourSynchronisation ERROR ("+DOMASynchroniser+", "+DOMDeSynchronisation+")");
			}
		},		
		desynchroniserPosition : function (elementDOM) {
			var position = this.trouverIndexElement (this.tabSynchroPosition, elementDOM, "DOMASynchroniser");
			if (position != -1) {
				this.tabSynchroPosition.splice (position, 1);
			}
			if (this.tabSynchroPosition.length == 0) {
				MMM_Utilitaires.element_removeListener(window, "scroll", this.ListenerWindow);
				MMM_Utilitaires.element_removeListener(window, "resize", this.ListenerWindow);
			}
		},
		
		flashVersion : 0.0,
		bitrate : 0,
		debit : -1, // exprimÃ© en kbps comme l'unitÃ© de dÃ©bit des vidÃ©os... :)
		latence : -1,
		
		init : function () {
			var capa = 0;
			try {
				capa = (navigator.mimeTypes && navigator.mimeTypes["application/x-shockwave-flash"]) 
					? navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin 
					: 0;
			}catch(e) {} 
			if (capa) {
				try {
					this.flashVersion = parseFloat(capa.description.match("([0-9]+\.[0-9]+)"));
				}catch(e){
					mmmlog("ERROR flash : " + e);
				}
			}else{
				try{
					var ax = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
					var version = ax.GetVariable("$version");
					this.flashVersion = parseFloat(version.match("([0-9]+\,[0-9]+),")[1].replace(',','.'));
				}catch(e) {}
			}
		},
		getComputedStyle : function(el, pseudo) {
			if (window.getComputedStyle)
				return window.getComputedStyle(el, pseudo);
			
			var obj = {};
			obj.el = el;
			obj.getPropertyValue = function(prop) {
				var re = /(\-([a-z]){1})/g;
				if (prop == 'float') prop = 'styleFloat';
				if (re.test(prop)) {
					prop = prop.replace(re, function () {
						return arguments[2].toUpperCase();
					});
				}
				return el.currentStyle[prop] || null;
			}
			return obj;
		},
		getWindowSize: function () {
			var w = window,
			d = document,
			e = d.documentElement,
			g = d.getElementsByTagName('body')[0],
			ws = e.clientWidth || g.clientWidth || w.innerWidth;
			hs = e.clientHeight || g.clientHeight || w.innerHeight;
			return [ws, hs];
		}
	}
	MMM_Utilitaires.init ();

	(function(){
		function Effect (){
			this.fps=15;
			this.duration=1000;
			this.type="";
			this.unit="px";
			this.start=0;
			this.end=0;
			this.prefix="";
			this.brackets=false;
			this.ease="";
			this.functionEnd=function(){};
			this.easeFunction=null;
			this.domElem = null;
		}
		Effect.prototype={
			tabEases:{},
			Init : function(parameters){
				for (var param in parameters) {
					if (typeof ( parameters[param] ) == typeof ( this[param] )) {
						this[param]=parameters[param];
					}
					else {
						mmmlog("WARNING Effect.Init : wrong type or unknown " + param + " parameter.");
					}
				}
				if (!this.tabEases[this.ease]) {
					mmmlog("WARNING Effect.Init : unknown " + this.ease + " ease.");
					this.ease = "linear";
				}
				this.easeFunction = this.tabEases[this.ease];
				if (!this.domElem.tagName) {
					mmmlog("ERROR Effect.Init : unknown domElem nÂ°" + i + ".");
					return false;
				}
				if (!this.type in this.domElem.style){
					mmmlog("ERROR Effect.Init : unknown type " + this.type + ".");
					return false;
				}
				styleContent = MMM_Utilitaires.getComputedStyle(this.domElem,null).getPropertyValue(this.type);
				if (styleContent) {
					var resultRegExp = styleContent.match(/([^0-9-]+)?(-?[0-9.]+)([^0-9]+)?/);
					if (resultRegExp) {
						this.brackets=false;
						if (resultRegExp[1]){
							if (typeof parameters.prefix == "undefined") {
								this.prefix=resultRegExp[1];
							}
						}
						if (resultRegExp[2]){
							if (typeof parameters.start == "undefined") {
								this.start=parseFloat (resultRegExp[2]);
							}
						}
						if (resultRegExp[3]){
							if (this.unit != resultRegExp[3]) {
								mmmlog("WARNING Effect.Init : unit is not the same than the computedStyle.");
							}
							if (typeof parameters.unit == "undefined") {
								this.unit=resultRegExp[3];
							}
						}
					}
					else {
					}
				}
				if (this.brackets) {
					this.prefix += "(";
					this.unit+=")";
				}
			},

			AddEase : function (name, func) {
				this.tabEases[name] = func;
			},
			
			StartEffect : function(){
				this.laps=this.end-this.start;
				var date=new Date();
				this.debut=date.getTime();
				this.MajEffect();
			},

			Step : function(){
				var _this = this;
				this.prog = setTimeout (function(){
					_this.MajEffect();
				},
				1000/this.fps);
			},
			
			MajEffect : function (){
				var date = new Date();
				this.fin = date.getTime();
				this.ecart = this.fin - this.debut;
				var value = this.easeFunction();
				if (this.ecart >= this.duration) {
					value=this.end;
				}
				mmmlog (this.type + ":" + this.prefix+value+this.unit);
				this.domElem.style[this.type]=this.prefix+value+this.unit;
				if (this.ecart <= this.duration) {
					this.Step();
				}
				else
				{
					if (this.functionEnd)
						this.functionEnd();
				}
			},

			StopEffect : function (){
				clearTimeout (this.prog);
			}
		}
		Effect.prototype.AddEase ("linear", function (){
			return this.laps * this.ecart / this.duration + this.start;
		});
		Effect.prototype.AddEase ("accelerate", function (){
			var tmp = this.ecart / this.duration;
			return this.laps * tmp * tmp + this.start;
		});
		Effect.prototype.AddEase ("decelerate", function (){
			var tmp = this.ecart / this.duration;
			return -this.laps * tmp * (tmp - 2) + this.start;
		});
		Effect.prototype.AddEase ("mixed", function (){
			var tmp = this.ecart / (this.duration / 2);
			if (tmp < 1) {
				return this.laps / 2 * tmp * tmp + this.start;
			}
			tmp--;
			return -this.laps / 2 * (tmp * (tmp - 2) - 1) + this.start;
		});
		MMM_Utilitaires.Effect = Effect;
	})();
}

if (!MMM_Visibilite) {
	var MMM_Visibilite = {
		tabElements : [],
		ajouterElement : function(elementDOM, fonctionSeuilVisible, fonctionSeuilInvisible) {
			mmmlog("MMM_Visibilite.ajouterElement "+elementDOM.id);
			
			if (this.tabElements.length == 0) {
				var self = this;
				this.ListenerWindow = function () {
					self.controlerVisibilite ();
				}
				MMM_Utilitaires.element_addListener(window, "scroll", this.ListenerWindow);
				MMM_Utilitaires.element_addListener(window, "resize", this.ListenerWindow);
			}
			
			if (elementDOM && elementDOM.offsetWidth) {
				this.tabElements.push ({elementDOM:elementDOM, fonctionSeuilVisible:fonctionSeuilVisible, fonctionSeuilInvisible:fonctionSeuilInvisible, etatVisible:false});
				this.ListenerWindow ();
			}
			else {
				mmmlog("visibility implementation impossible for " + elementDOM);
				return false;
			}
			return true;
		},
		
		retirerElement : function(elementDOM) {
			var idCrea = MMM_Utilitaires.trouverIndexElement(this.tabElements, elementDOM, "elementDOM");
			if (idCrea == -1) {
				mmmlog("MMM_Visibilite.retirerElement elementDOM non prÃ©sent dans la liste");
			}
			else {
				this.tabElements.splice (idCrea, 1);
				if (this.tabElements.length == 0) {
					MMM_Utilitaires.element_removeListener (document, "scroll", this.ListenerWindow);
					MMM_Utilitaires.element_removeListener (document, "resize", this.ListenerWindow);
				}
			}
		},
		
		controlerVisibilite : function (){
			for (var i = 0, maxElems = this.tabElements.length; i < maxElems; i++) {
				var visible = this.verifierVisibilite (this.tabElements [i].elementDOM);
				if (this.tabElements [i].etatVisible == false && visible) {
					var self = this;
					window.setTimeout ((function (cible){
						return function () {
							// on s'assure que personne n'a supprimÃ© l'Ã©lÃ©ment pendant le setTimeout
							if (MMM_Utilitaires.trouverIndexElement(self.tabElements, cible.elementDOM, "elementDOM") == -1) {
								return;
							}
							
							var visible = self.verifierVisibilite (cible.elementDOM);
							if (cible.etatVisible == false && visible) {
								cible.etatVisible = true;
								mmmlog('ici la visibilite, vous devenez visible');
								cible.fonctionSeuilVisible();
							}
						}
					})(this.tabElements [i]), 1000);
				}
				else if (this.tabElements [i].etatVisible && !visible) {
					var self = this;
					window.setTimeout ((function (cible){
						return function () {
							// on s'assure que personne n'a supprimÃ© l'Ã©lÃ©ment pendant le setTimeout
							if (MMM_Utilitaires.trouverIndexElement(self.tabElements, cible.elementDOM, "elementDOM") == -1) {
								return;
							}
							
							var visible = self.verifierVisibilite (cible.elementDOM);
							if (cible.etatVisible && !visible) {
								cible.etatVisible = false;
								mmmlog('ici la visibilite, vous devenez invisible');
								cible.fonctionSeuilInvisible();
							}
						}
					})(this.tabElements [i]), 1000);
				}
			}
		},
		verifierVisibilite : function (elementDOM){
			try {
				// attention, l'ordre des conditions du || est important car FF Ã©value mal document.documentElement.whatever dans certains cas
				var windowWidth = window.innerWidth  || (document.documentElement && document.documentElement.clientWidth)  ||  document.body.clientWidth,
					windowHeight = window.innerHeight || (document.documentElement && document.documentElement.clientHeight) || document.body.clientHeight,
				
					scrollLeft = (document.documentElement && document.documentElement.scrollLeft) || window.pageXOffset || document.body.scrollLeft,
					scrollTop  = (document.documentElement && document.documentElement.scrollTop)  || window.pageYOffset || document.body.scrollTop,
					
					creaWidth  = elementDOM.offsetWidth,
					creaHeight = elementDOM.offsetHeight,
					
					positionFormat = MMM_Utilitaires.trouverPositionElementDOM (elementDOM),
					creaX = positionFormat[0],
					creaY = positionFormat[1];

				var pxVisibiliteX = Math.min (creaWidth,  Math.max(0, windowWidth  + scrollLeft - creaX)) - Math.min (creaWidth,  Math.max (0, scrollLeft - creaX));
				var pxVisibiliteY = Math.min (creaHeight, Math.max(0, windowHeight + scrollTop  - creaY)) - Math.min (creaHeight, Math.max (0, scrollTop  - creaY));
				
				pourcentageVisibilite = parseInt (100 * pxVisibiliteX / creaWidth * pxVisibiliteY / creaHeight);
			//	mmmlog("pourcentage Visibilite de "+elementDOM.id+" = " + pourcentageVisibilite + "%");
				if (pourcentageVisibilite > 50)
					return true;
				else
					return false;
			}
			catch (e) {
				mmmlog("MMM_Visibilite.verifierVisibilite error DOM");
			}
		}
	}
}

// insÃ©rer iframe buster ici afin que la suite s'exÃ©cute dans un scope autre


