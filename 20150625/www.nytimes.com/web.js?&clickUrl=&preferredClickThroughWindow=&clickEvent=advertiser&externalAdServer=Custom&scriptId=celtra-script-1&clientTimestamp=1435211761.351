
            (function() {
                // Dynamic values from page request
                var script = document.getElementById("celtra-script-1");
                if (!script || script.tagName.toLowerCase() !== 'script')
                    throw 'Element with id equal to scriptId does not exist or is not a script.';
                var runtimeParams = {"deviceInfo":{"model":"Firefox - Linux","browserVersion":null,"deviceType":"Desktop","browserName":"Firefox","primaryHardwareType":"Desktop","browserRenderingEngine":"Gecko","osName":"Linux","osVersion":null,"mobileDevice":"0","vendor":"Mozilla"},"ipDmaCode":null,"authToken":"68fb27ed1165d964050de0806030d14c","ipCity":"Talence","ipCountryCode":"FR","gpsLat":"","customAudiences":{},"preferredClickThroughWindow":"","ipRegionName":"Aquitaine","ipAreaCode":null,"derivedAudiences":{},"ipPostalCode":"33400","purpose":"live","externalAdServer":"Custom","authBasis":"1435211761580,6c3632b2,6462345c","gpsLng":"","neustarSegment":null,"variantChoices":{"CdnTiming":null},"scriptId":"celtra-script-1","language":"en","ipLat":44.80479,"ipCountryName":"France","ipMetroCode":null,"sessionId":"s1435211761xab9d67102446f8x14555011","clickUrl":"","clientTimestamp":"1435211761.351","weather":null,"ipTimeZone":"Europe\/Paris","ipRegionCode":"97","ipLng":-0.5954,"clickEvent":"advertiser","secure":0,"platformAdvIdTrackingLimited":null,"platformAdvId":null,"placementId":"6462345c","firstPage":1,"monotypeProjectId":"c46ed090-3671-4163-a85b-b06b4038ae38"};
                runtimeParams.redirectJsClientTimestamp = new Date() / 1000;
                var macros = function (x) {
                    if (x instanceof Array) {
                        return x.map(macros);
                    } else {
                        var macroTags = [['{celtraPlacementId}', "6462345c"],
                                         ['{celtraCreativeId}', "6c3632b2"],
                                         ['{celtraAccountId}', "7797a89d"],
                                         ['{celtraCampaignId}', "92eb416c"],
                                         ['{celtraProto}',"http"],
                                         ['{celtraRandom}', (Math.random()+'').slice(2)],
                                         ['{celtraPlatformAdvId}', null],
                                         ['{celtraPlatformAdvIdTrackingLimited}', 0],
                                         ['%s', "http"],
                                         ['%n', (Math.random()+'').slice(2)] ];
                        return macroTags.reduce(function(str, replacementRule, idx, arr) {
                            return str.replace(new RegExp(replacementRule[0], 'ig'), replacementRule[1] ? replacementRule[1] : '');
                        }, x);
                    }
                };
        
                
                // Dynamic values that we do not want to pass forward in urls,
                // so we look them up on every page request based on runtimeParams
                var openWebsiteOverrideUrls = {};
                var getAppOverrideUrls      = {};
                var brand                   = {"allowsCookies":"0"};
                
                // Less dynamic values for payload request
                var payloadBase = "http:\/\/cache.celtra.com\/api\/creatives\/6c3632b2\/compiled\/web.js";
                var cacheParams = {"v": "5-46cd8a32b8", "secure": 0};
                
                var trackers = (function() {
            return [

        // 3rd-party tracker (regular)
        function(event) {
            if (event.name == 'adLoading')
                return {urls: macros([])};

            if (event.name == 'creativeLoaded')
                return {urls: macros([])};
            
            if (event.name == 'viewable00')
                return {urls: macros([])};
            
            if (event.name == 'viewable501')
                return {urls: macros([])};
            
            if (event.name == 'custom')
                return {urls: macros({}[event.label] || [])};
            
            if (event.name == 'urlOpened')
                return {urls: macros({}[event.label] || [])};
                
            if (event.name == 'storeOpened')
                return {urls: macros({}[event.label] || [])};
        },

        // 3rd-party tracker (click regular)
        function(event) {
            if (event.name === "firstInteraction")
                return {urls: macros([]), events: [{name: 'click'}] };
        }
]
        })();
                trackers.urlsAndEventsFor = function(event) {
                    return this.reduce(function(acc, tracker) {
                        var ue = tracker(event) || {};
                        return {
                            urls:   acc.urls.concat(ue.urls || []),
                            events: acc.events.concat(ue.events || [])
                        };
                    }, {urls: [], events: []});
                };
                
                var adLoadingEvent = {"name":"adLoading","sessionId":"s1435211761xab9d67102446f8x14555011"};
                adLoadingEvent.clientTimestamp = new Date/1000;

                trackers.urlsAndEventsFor(adLoadingEvent).urls.forEach(function(url) {
                    (new Image).src = url;
                });
                
                // Build payload url
                var pairs = [];
                for (var k in cacheParams)
                    pairs.push(encodeURIComponent(k) + '=' + encodeURIComponent(cacheParams[k]));
                var payloadUrl = payloadBase + '?' + pairs.join('&');
            
                // Request and run payload
                var payload = document.createElement('script');
                payload.src = payloadUrl;
                payload.onload = function() {
                    runtimeParams.payloadJsClientTimestamp = new Date() / 1000;
                    window.celtra.payloads[payloadUrl](script, runtimeParams, trackers, openWebsiteOverrideUrls, getAppOverrideUrls, brand, macros);
                };
                
                script.parentNode.insertBefore(payload, script.nextSibling);
            })();
            